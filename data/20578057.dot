digraph {
	node [shape=circle style=filled]
	_the_q -> _producer_n_of [label=BV]
	poss -> _contract_n_1 [label=ARG1]
	poss -> pron [label=ARG2]
	_fulfil_v_1 -> _contract_n_1 [label=ARG2]
	def_explicit_q -> _contract_n_1 [label=BV]
	_fulfil_v_1 -> _producer_n_of [label=ARG1]
	compound -> _mister_n_1 [label=ARG2]
	_the_q -> _studio_n_1 [label=BV]
	appos -> _attorney_n_1 [label=ARG2]
	udef_q -> _mister_n_1 [label=BV]
	_still_a_1 -> "_want_v_1-fn.Desiring" [label=ARG1]
	"_say_v_to-fn.IN" -> "_want_v_1-fn.Desiring" [label="ARG2-fn.NotExist"]
	pronoun_q -> pron [label=BV]
	compound -> _attorney_n_1 [label=ARG1]
	proper_q -> "named(Rabinowitz)" [label=BV]
	proper_q -> "named(Warner)" [label=BV]
	"_say_v_to-fn.IN" -> "named(Rabinowitz)" [label="ARG1-fn.NotExist"]
	compound -> "named(Rabinowitz)" [label=ARG1]
	"_want_v_1-fn.Desiring" -> _and_c [label="ARG2-fn.NotExist"]
	_come_v_back -> _producer_n_of [label=ARG1]
	compound -> "named(Warner)" [label=ARG2]
	"_want_v_1-fn.Desiring" -> _studio_n_1 [label="ARG1-fn.NotExist"]
	appos -> "named(Rabinowitz)" [label=ARG1]
	_the_q -> _attorney_n_1 [label=BV]
}
