digraph {
	node [shape=circle style=filled]
	_run_v_1 -> _task_n_of [label=ARG2]
	"_claim_v_1-fn.Statement" -> _and_c [label="ARG2-fn.Topic"]
	_conventional_a_1 -> _network_n_of [label=ARG1]
	proper_q -> "named(Packard)" [label=BV]
	compound -> "named(Hewlett-)" [label=ARG2]
	udef_q -> _task_n_of [label=BV]
	_each_q -> _task_n_of [label=BV]
	"card(3)" -> "named_n(Times)" [label=ARG1]
	comp_equal -> "much-many_a" [label=ARG1]
	_run_v_1 -> _network_n_of [label=ARG1]
	"_allow_v_1-fn.IN" -> _run_v_1 [label="ARG3-fn.NotExist"]
	_run_v_1 -> _software_n_1 [label=ARG1]
	_the_q -> _software_n_1 [label=BV]
	"_allow_v_1-fn.IN" -> _network_n_of [label="ARG2-fn.NotExist"]
	proper_q -> "named(Hewlett-)" [label=BV]
	_a_q -> _network_n_of [label=BV]
	compound -> "named(Packard)" [label=ARG1]
	comp_equal -> _fast_a_1 [label=ARG1]
	"_claim_v_1-fn.Statement" -> "named(Packard)" [label="ARG1-fn.Agent"]
	udef_q -> "named_n(Times)" [label=BV]
	"much-many_a" -> _task_n_of [label=ARG1]
	_twice_x_deg -> comp_equal [label=ARG1]
	_fast_a_1 -> _run_v_1 [label=ARG1]
	compound -> "named_n(Times)" [label=ARG2]
	compound -> _task_n_of [label=ARG1]
	comp_equal -> _network_n_of [label=ARG2]
	"_allow_v_1-fn.IN" -> _software_n_1 [label="ARG1-fn.NotExist"]
	udef_q -> _network_n_of [label=BV]
}
