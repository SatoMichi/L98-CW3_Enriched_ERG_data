digraph {
	node [shape=circle style=filled]
	compound -> _pricing_n_1 [label=ARG2]
	"_insist_v_1-fn.Rite" -> neg [label="ARG2-fn.Member"]
	_in_p -> _face_n_1 [label=ARG2]
	_poor_a_1 -> _result_n_of [label=ARG1]
	"_abandon_v_1-fn.Rite" -> _approach_n_to [label="ARG2-fn.Member"]
	compound -> _approach_n_to [label=ARG1]
	"_intend_v_for-fn.Have_as_requirement" -> pron [label="ARG1-fn.Dependent"]
	pronoun_q -> pron [label=BV]
	proper_q -> "named(Sears)" [label=BV]
	udef_q -> _pricing_n_1 [label=BV]
	_of_p -> _result_n_of [label=ARG2]
	_the_q -> _result_n_of [label=BV]
	compound -> _official_n_1 [label=ARG1]
	compound -> "named(Sears)" [label=ARG2]
	_the_q -> _approach_n_to [label=BV]
	_of_p -> _face_n_1 [label=ARG1]
	_everyday_a_1 -> _pricing_n_1 [label=ARG1]
	"_abandon_v_1-fn.Rite" -> pron [label="ARG1-fn.Leader"]
	"_intend_v_for-fn.Have_as_requirement" -> "_abandon_v_1-fn.Rite" [label="ARG2-fn.Requirement"]
	udef_q -> _official_n_1 [label=BV]
	_in_p -> "_abandon_v_1-fn.Rite" [label=ARG1]
	neg -> "_intend_v_for-fn.Have_as_requirement" [label=ARG1]
	_the_q -> _face_n_1 [label=BV]
	"_insist_v_1-fn.Rite" -> _official_n_1 [label="ARG1-fn.Leader"]
}
