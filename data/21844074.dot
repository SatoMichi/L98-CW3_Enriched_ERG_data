digraph {
	node [shape=circle style=filled]
	parg_d -> _import_v_1 [label=ARG1]
	"_say_v_to-fn.IN" -> "named(Sibra)" [label="ARG1-fn.NotExist"]
	"_see_v_1-fn.Perception_experience" -> _beer_n_1 [label="ARG2-fn.NotExist"]
	_light_a_of -> _beer_n_1 [label=ARG1]
	compound -> "named(Amstel)" [label=ARG2]
	compound -> "named(Light)" [label=ARG1]
	poss -> "named(Heidelberg)" [label=ARG2]
	_feature_v_cause -> _line_n_of [label=ARG2]
	compound -> _beer_n_1 [label=ARG2]
	_the_q -> _brand_n_of [label=BV]
	_the_q -> _line_n_of [label=BV]
	proper_q -> "named(Heidelberg)" [label=BV]
	_for_p -> _brand_n_of [label=ARG2]
	compound -> _leader_n_of [label=ARG1]
	def_explicit_q -> _ad_n_1 [label=BV]
	_for_p -> _ad_n_1 [label=ARG1]
	"_compete_v_1-fn.Competition" -> _brand_n_of [label="ARG1-fn.Agent"]
	_best_a_1 -> _taste_v_1 [label=ARG1]
	_import_v_1 -> _beer_n_1 [label=ARG2]
	parg_d -> _beer_n_1 [label=ARG2]
	appos -> _beer_n_1 [label=ARG2]
	pronoun_q -> pron [label=BV]
	_taste_v_1 -> _beer_n_1 [label=ARG1]
	proper_q -> "named(Sibra)" [label=BV]
	_the_q -> _beer_n_1 [label=BV]
	_feature_v_cause -> _ad_n_1 [label=ARG1]
	"_say_v_to-fn.IN" -> "_compete_v_1-fn.Competition" [label="ARG2-fn.NotExist"]
	_with_p -> "named(Light)" [label=ARG2]
	"ord(1)" -> _ad_n_1 [label=ARG1]
	udef_q -> _beer_n_1 [label=BV]
	proper_q -> "named(Light)" [label=BV]
	"_see_v_1-fn.Perception_experience" -> pron [label="ARG1-fn.NotExist"]
	_ever_a_1 -> "_see_v_1-fn.Perception_experience" [label=ARG1]
	poss -> _ad_n_1 [label=ARG1]
	udef_q -> _leader_n_of [label=BV]
	_with_p -> "_compete_v_1-fn.Competition" [label=ARG1]
	proper_q -> "named(Amstel)" [label=BV]
	appos -> _line_n_of [label=ARG1]
}
