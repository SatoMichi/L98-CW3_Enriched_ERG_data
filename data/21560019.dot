digraph {
	node [shape=circle style=filled]
	"_say_v_to-fn.IN" -> _would_v_modal [label="ARG2-fn.Topic"]
	_definite_a_1 -> neg [label=ARG1]
	focus_d -> _would_v_modal [label=ARG2]
	_need_n_of -> _money_n_1 [label=ARG1]
	udef_q -> _money_n_1 [label=BV]
	poss -> generic_entity [label=ARG1]
	_in_p -> pron [label=ARG1]
	compound -> "named(New)" [label=ARG2]
	_in_p -> _need_n_of [label=ARG2]
	compound -> "named(Merola)" [label=ARG1]
	proper_q -> "named(New)" [label=BV]
	compound -> _mister_n_1 [label=ARG2]
	appos -> _agent_n_of [label=ARG2]
	udef_q -> _mister_n_1 [label=BV]
	def_explicit_q -> generic_entity [label=BV]
	_in_p -> _agent_n_of [label=ARG1]
	parg_d -> _agent_n_of [label=ARG2]
	poss -> "named(Jackson)" [label=ARG2]
	_would_v_modal -> "_say_v_to-fn.IN" [label=ARG1]
	"_say_v_to-fn.IN" -> "named(Merola)" [label="ARG1-fn.Agent"]
	pronoun_q -> pron [label=BV]
	compound -> "named(York)" [label=ARG1]
	udef_q -> _need_n_of [label=BV]
	proper_q -> "named(Matt)" [label=BV]
	proper_q -> "named(Jackson)" [label=BV]
	_base_v_1 -> _in_p [label=ARG3]
	_a_q -> _agent_n_of [label=BV]
	proper_q -> "named(Merola)" [label=BV]
	"_say_v_to-fn.IN" -> pron [label="ARG1-fn.Agent"]
	_in_p -> "named(York)" [label=ARG2]
	appos -> "named(Merola)" [label=ARG1]
	_agent_n_of -> generic_entity [label=ARG1]
	parg_d -> _base_v_1 [label=ARG1]
	neg -> _in_p [label=ARG1]
	_base_v_1 -> _agent_n_of [label=ARG2]
	"_say_v_to-fn.IN" -> _definite_a_1 [label="ARG2-fn.Topic"]
	proper_q -> "named(York)" [label=BV]
	compound -> "named(Matt)" [label=ARG2]
	compound -> "named(Jackson)" [label=ARG1]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
