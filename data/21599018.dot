digraph {
	node [shape=circle style=filled]
	udef_q -> _people_n_of [label=BV]
	compound -> "named(Joel)" [label=ARG2]
	proper_q -> "named(Donaldson)" [label=BV]
	udef_q -> _term_n_of [label=BV]
	proper_q -> "named(Gross)" [label=BV]
	_only_a_1 -> "_get_v_from-to-fn.Needing" [label=ARG1]
	_with_p -> implicit_conj [label=ARG2]
	_term_n_of -> _growth_n_of [label=ARG1]
	_already_a_1 -> ellipsis_ref [label=ARG1]
	focus_d -> "_say_v_to-fn.Cause_to_end" [label=ARG1]
	focus_d -> _but_c [label=ARG2]
	udef_q -> nominalization [label=BV]
	ellipsis_ref -> _expectation_n_of [label=ARG1]
	_with_p -> _analyst_n_1 [label=ARG1]
	"_good_a_at-for-of" -> _move_n_1 [label=ARG1]
	udef_q -> _and_c [label=BV]
	which_q -> place_n [label=BV]
	loc_nonsp -> ellipsis_ref [label=ARG1]
	"_get_v_from-to-fn.Needing" -> pron [label="ARG2-fn.Requirement"]
	"_get_v_from-to-fn.Needing" -> nominalization [label="ARG4-fn.Circumstances"]
	compound -> "named(D)" [label=ARG1]
	proper_q -> "named(Lufkin)" [label=BV]
	proper_q -> "named(Joel)" [label=BV]
	proper_q -> "named(Jenrette)" [label=BV]
	_a_q -> _analyst_n_1 [label=BV]
	compound -> _earnings_n_1 [label=ARG2]
	pronoun_q -> pron [label=BV]
	"_be_v_id-fn.Assemble" -> _move_n_1 [label="ARG2-fn.Group"]
	_this_q_dem -> generic_entity [label=BV]
	proper_q -> "named(D)" [label=BV]
	poss -> _expectation_n_of [label=ARG1]
	udef_q -> _earnings_n_1 [label=BV]
	appos -> _analyst_n_1 [label=ARG2]
	appos -> "named(Gross)" [label=ARG1]
	"_say_v_to-fn.Cause_to_end" -> _but_c [label="ARG2-fn.Means"]
	udef_q -> _growth_n_of [label=BV]
	_in_p -> _term_n_of [label=ARG2]
	"_say_v_to-fn.Cause_to_end" -> "named(Gross)" [label="ARG1-fn.Process"]
	"_be_v_id-fn.Assemble" -> generic_entity [label="ARG1-fn.Individuals"]
	poss -> _people_n_of [label=ARG2]
	nominalization -> ellipsis_ref [label=ARG1]
	_a_q -> _move_n_1 [label=BV]
	loc_nonsp -> place_n [label=ARG2]
	compound -> _growth_n_of [label=ARG1]
	_in_p -> ellipsis_ref [label=ARG1]
	def_explicit_q -> _expectation_n_of [label=BV]
	udef_q -> implicit_conj [label=BV]
	compound -> "named(Gross)" [label=ARG1]
}
