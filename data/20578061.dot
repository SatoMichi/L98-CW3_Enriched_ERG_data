digraph {
	node [shape=circle style=filled]
	_at_p -> "named(Warner)" [label=ARG2]
	poss -> pron [label=ARG2]
	poss -> _project_n_1 [label=ARG1]
	proper_q -> "named(Semel)" [label=BV]
	"_start_v_cause-fn.Activity_start" -> _frenzy_n_1 [label="ARG2-fn.Theme"]
	def_explicit_q -> _producer_n_of [label=BV]
	compound -> _mister_n_1 [label=ARG2]
	"_inform_v_1-fn.Telling" -> pron [label="ARG2-fn.NotExist"]
	compound -> _frenzy_n_1 [label=ARG1]
	nominalization -> _feed_v_2 [label=ARG1]
	_the_q -> _project_n_1 [label=BV]
	udef_q -> _mister_n_1 [label=BV]
	"_start_v_cause-fn.Activity_start" -> _producer_n_of [label="ARG1-fn.Agent"]
	compound -> nominalization [label=ARG2]
	_for_p -> _project_n_1 [label=ARG2]
	_at_p -> _project_n_1 [label=ARG1]
	"_inform_v_1-fn.Telling" -> "_start_v_cause-fn.Activity_start" [label="ARG3-fn.NotExist"]
	_for_p -> _frenzy_n_1 [label=ARG1]
	"_as+for_p" -> _project_n_1 [label=ARG2]
	pronoun_q -> pron [label=BV]
	def_explicit_q -> _project_n_1 [label=BV]
	compound -> "named(Guber)" [label=ARG1]
	focus_d -> "_as+for_p" [label=ARG2]
	"_say_v_to-fn.IN" -> "named(Guber)" [label="ARG1-fn.NotExist"]
	proper_q -> "named(Guber)" [label=BV]
	"_say_v_to-fn.IN" -> "_inform_v_1-fn.Telling" [label="ARG2-fn.NotExist"]
	"_inform_v_1-fn.Telling" -> "named(Semel)" [label="ARG1-fn.NotExist"]
	_already_a_1 -> "_start_v_cause-fn.Activity_start" [label=ARG1]
	udef_q -> nominalization [label=BV]
	proper_q -> "named(Warner)" [label=BV]
	"_as+for_p" -> "_say_v_to-fn.IN" [label=ARG1]
	"_remain_v_1-fn.State_continue" -> _at_p [label="ARG2-fn.Theme"]
	compound -> "named(Semel)" [label=ARG1]
	_a_q -> _frenzy_n_1 [label=BV]
	poss -> _producer_n_of [label=ARG1]
	poss -> "named(Warner)" [label=ARG2]
	"_remain_v_1-fn.State_continue" -> _project_n_1 [label="ARG1-fn.NotExist"]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
