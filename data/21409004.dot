digraph {
	node [shape=circle style=filled]
	compound -> "named(SPAN)" [label=ARG1]
	proper_q -> "named(C)" [label=BV]
	compound -> _show_n_of [label=ARG1]
	compound -> "named(C)" [label=ARG2]
	udef_q -> _television_n_1 [label=BV]
	"_plug_v_1-fn.Cause_to_end" -> _contest_n_1 [label="ARG2-fn.Means"]
	poss -> "named(King)" [label=ARG2]
	_the_q -> _network_n_of [label=BV]
	proper_q -> "named(Sajak)" [label=BV]
	compound -> "named(Pat)" [label=ARG2]
	compound -> _cable_n_1 [label=ARG2]
	_on_p -> _show_n_of [label=ARG2]
	"_plug_v_1-fn.Cause_to_end" -> pron [label="ARG1-fn.Process"]
	proper_q -> "named(SPAN)" [label=BV]
	pronoun_q -> pron [label=BV]
	_the_q -> _contest_n_1 [label=BV]
	compound -> _network_n_of [label=ARG1]
	def_explicit_q -> _show_n_of [label=BV]
	compound -> "named(King)" [label=ARG1]
	compound -> "named(Larry)" [label=ARG2]
	udef_q -> _radio_n_1 [label=BV]
	proper_q -> "named(Larry)" [label=BV]
	proper_q -> "named(King)" [label=BV]
	poss -> _show_n_of [label=ARG1]
	_on_p -> "_plug_v_1-fn.Cause_to_end" [label=ARG1]
	compound -> _radio_n_1 [label=ARG2]
	udef_q -> _cable_n_1 [label=BV]
	proper_q -> "named(Pat)" [label=BV]
	compound -> "named(Sajak)" [label=ARG1]
	_on_p -> _network_n_of [label=ARG2]
	poss -> "named(Sajak)" [label=ARG2]
	compound -> _television_n_1 [label=ARG1]
}
