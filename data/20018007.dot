digraph {
	node [shape=circle style=filled]
	udef_q -> part_of [label=BV]
	compound -> _chief_n_1 [label=ARG2]
	proper_q -> "named(Computer)" [label=BV]
	compound -> "named(Barnum)" [label=ARG1]
	compound -> _officer_n_1 [label=ARG1]
	compound -> "named(Cray)" [label=ARG2]
	focus_d -> "_say_v_to-fn.Have_as_requirement" [label=ARG1]
	"_say_v_to-fn.Have_as_requirement" -> _officer_n_1 [label="ARG1-fn.Dependent"]
	compound -> "named(Computer)" [label=ARG1]
	_in_p -> "_say_v_to-fn.Have_as_requirement" [label=ARG1]
	"_have_v_1-fn.State_continue" -> part_of [label="ARG2-fn.State"]
	proper_q -> "named(Barnum)" [label=BV]
	part_of -> _choice_n_of [label=ARG1]
	def_explicit_q -> _officer_n_1 [label=BV]
	compound -> "named(Gregory)" [label=ARG2]
	"_say_v_to-fn.Have_as_requirement" -> neg [label="ARG2-fn.Requirement"]
	proper_q -> "named(Gregory)" [label=BV]
	focus_d -> "_have_v_1-fn.State_continue" [label=ARG2]
	appos -> "named(Barnum)" [label=ARG2]
	udef_q -> _chief_n_1 [label=BV]
	_a_q -> _choice_n_of [label=BV]
	neg -> "_have_v_1-fn.State_continue" [label=ARG1]
	appos -> _officer_n_1 [label=ARG1]
	"much-many_a" -> part_of [label=ARG1]
	pronoun_q -> pron [label=BV]
	proper_q -> "named(Cray)" [label=BV]
	poss -> "named(Computer)" [label=ARG2]
	poss -> _officer_n_1 [label=ARG1]
	_financial_a_1 -> _officer_n_1 [label=ARG1]
	_in_p -> _interview_n_1 [label=ARG2]
	"_have_v_1-fn.State_continue" -> pron [label="ARG1-fn.Entity"]
	_a_q -> _interview_n_1 [label=BV]
}
