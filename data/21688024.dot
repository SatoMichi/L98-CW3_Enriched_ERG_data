digraph {
	node [shape=circle style=filled]
	"_prove_v_to-fn.Reasoning" -> _defendant_n_1 [label="ARG1-fn.NotExist"]
	poss -> "named(Francisco)" [label=ARG2]
	"_prove_v_to-fn.Reasoning" -> _meet_v_1 [label="ARG2-fn.Theme"]
	"_say_v_to-fn.IN" -> _if_x_then [label="ARG2-fn.Topic"]
	udef_q -> _building_n_1 [label=BV]
	proper_q -> "named(Francisco)" [label=BV]
	compound -> "named(San)" [label=ARG2]
	_that_q_dem -> generic_entity [label=BV]
	_can_v_modal -> "_prove_v_to-fn.Reasoning" [label=ARG1]
	compound -> _code_n_1 [label=ARG1]
	compound -> _mister_n_1 [label=ARG2]
	proper_q -> "named(Ruvolo)" [label=BV]
	udef_q -> _mister_n_1 [label=BV]
	"_say_v_to-fn.IN" -> "named(Ruvolo)" [label="ARG1-fn.Agent"]
	"_going+to_v_qmodal" -> _protect_v_1 [label=ARG1]
	_if_x_then -> _probable_a_1 [label=ARG1]
	def_explicit_q -> _code_n_1 [label=BV]
	_meet_v_1 -> _code_n_1 [label=ARG2]
	_protect_v_1 -> pron [label=ARG2]
	pronoun_q -> pron [label=BV]
	_probable_a_1 -> "_going+to_v_qmodal" [label=ARG1]
	poss -> _code_n_1 [label=ARG1]
	compound -> "named(Francisco)" [label=ARG1]
	"_stringent/jj_u_unknown" -> _code_n_1 [label=ARG1]
	_protect_v_1 -> generic_entity [label=ARG1]
	_meet_v_1 -> pron [label=ARG1]
	proper_q -> "named(San)" [label=BV]
	udef_q -> _defendant_n_1 [label=BV]
	focus_d -> "_going+to_v_qmodal" [label=ARG2]
	_if_x_then -> _can_v_modal [label=ARG2]
	compound -> _building_n_1 [label=ARG2]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
	compound -> "named(Ruvolo)" [label=ARG1]
}
