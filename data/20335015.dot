digraph {
	node [shape=circle style=filled]
	_a_q -> _attorney_n_1 [label=BV]
	_in_p -> _interview_n_1 [label=ARG2]
	_by_p -> _or_c [label=ARG2]
	udef_q -> _parent_n_of [label=BV]
	_criminal_a_1 -> _behavior_n_1 [label=ARG1]
	poss -> pron [label=ARG2]
	_in_p -> "_say_v_to-fn.IN" [label=ARG1]
	_a_q -> _interview_n_1 [label=BV]
	appos -> _attorney_n_1 [label=ARG2]
	"_say_v_to-fn.IN" -> "named(Bickwit)" [label="ARG1-fn.NotExist"]
	_any_q -> _behavior_n_1 [label=BV]
	_for_p -> _corporation_n_1 [label=ARG2]
	poss -> _corporation_n_1 [label=ARG1]
	poss -> "named(Lincoln)" [label=ARG2]
	udef_q -> _or_c [label=BV]
	compound -> _parent_n_of [label=ARG2]
	"_say_v_to-fn.IN" -> "_deny_v_to-fn.Statement" [label="ARG2-fn.NotExist"]
	def_explicit_q -> _officer_n_1 [label=BV]
	"_deny_v_to-fn.Statement" -> pron [label="ARG1-fn.Agent"]
	proper_q -> "named(Lincoln)" [label=BV]
	proper_q -> "named(Washington)" [label=BV]
	pronoun_q -> pron [label=BV]
	def_explicit_q -> _corporation_n_1 [label=BV]
	compound -> _corporation_n_1 [label=ARG1]
	proper_q -> "named(Bickwit)" [label=BV]
	_the_q -> _association_n_of [label=BV]
	"_deny_v_to-fn.Statement" -> _behavior_n_1 [label="ARG2-fn.Predicate"]
	compound -> "named(Leonard)" [label=ARG2]
	compound -> _attorney_n_1 [label=ARG1]
	compound -> "named(Bickwit)" [label=ARG1]
	compound -> "named(Washington)" [label=ARG2]
	_for_p -> _attorney_n_1 [label=ARG1]
	poss -> _officer_n_1 [label=ARG1]
	appos -> "named(Bickwit)" [label=ARG1]
	proper_q -> "named(Leonard)" [label=BV]
	_by_p -> _behavior_n_1 [label=ARG1]
}
