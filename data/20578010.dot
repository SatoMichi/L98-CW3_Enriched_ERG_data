digraph {
	node [shape=circle style=filled]
	"_have_v_1-fn.IN" -> _job_n_of [label="ARG2-fn.Theme"]
	"_tell_v_1-fn.Telling" -> pron [label="ARG2-fn.Topic"]
	"_say_v_to-fn.IN" -> "named(Peters)" [label="ARG1-fn.Agent"]
	_at_p -> "named(Warner)" [label=ARG2]
	poss -> pron [label=ARG2]
	_in_p_state -> _response_n_to [label=ARG2]
	neg -> "_have_v_1-fn.IN" [label=ARG1]
	"_tell_v_1-fn.Telling" -> neg [label="ARG3-fn.Recipient"]
	_refer_v_to -> _colleague_n_1 [label=ARG2]
	proper_q -> "named(Peters)" [label=BV]
	compound -> _mister_n_1 [label=ARG2]
	"_say_v_to-fn.IN" -> _colon_p_namely [label="ARG2-fn.NotExist"]
	focus_d -> _in_p_state [label=ARG2]
	_a_q -> _job_n_of [label=BV]
	udef_q -> _mister_n_1 [label=BV]
	compound -> "named(Peters)" [label=ARG1]
	poss -> _colleague_n_1 [label=ARG1]
	_with_p -> _refer_v_to [label=ARG1]
	_refer_v_to -> "named(Ross)" [label=ARG1]
	_with_p -> _obscenity_n_1 [label=ARG2]
	"_have_v_1-fn.IN" -> pron [label="ARG1-fn.Pivot"]
	compound -> "named(Ross)" [label=ARG1]
	pronoun_q -> pron [label=BV]
	_at_p -> _colleague_n_1 [label=ARG1]
	udef_q -> _response_n_to [label=BV]
	"_say_v_to-fn.IN" -> _and_c [label="ARG2-fn.NotExist"]
	proper_q -> "named(Ross)" [label=BV]
	_colon_p_namely -> "_tell_v_1-fn.Telling" [label=ARG1]
	proper_q -> "named(Warner)" [label=BV]
	"_say_v_to-fn.IN" -> "named(Ross)" [label="ARG1-fn.Agent"]
	_in_p_state -> "_say_v_to-fn.IN" [label=ARG1]
	def_explicit_q -> _colleague_n_1 [label=BV]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
	_a_q -> _obscenity_n_1 [label=BV]
}
