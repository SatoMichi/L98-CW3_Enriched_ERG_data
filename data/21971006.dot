digraph {
	node [shape=circle style=filled]
	udef_q -> _software_n_1 [label=BV]
	_of_p -> _software_n_1 [label=ARG2]
	_a_q -> _device_n_1 [label=BV]
	poss -> _price_n_of [label=ARG1]
	poss -> pron [label=ARG2]
	_of_p -> _lack_n_1 [label=ARG1]
	udef_q -> _storage_n_of [label=BV]
	_a_q -> _sell_n_1 [label=BV]
	"_because+of_p" -> implicit_conj [label=ARG2]
	_optical_a_1 -> _storage_n_of [label=ARG1]
	udef_q -> implicit_conj [label=BV]
	def_explicit_q -> _price_n_of [label=BV]
	"_prove_v_to-fn.Turning_out" -> _sell_n_1 [label="ARG2-fn.Theme"]
	pronoun_q -> pron [label=BV]
	_a_q -> _lack_n_1 [label=BV]
	_slow_a_1 -> _device_n_1 [label=ARG1]
	_hard_a_for -> _sell_n_1 [label=ARG1]
	_high_a_1 -> _price_n_of [label=ARG1]
	udef_q -> _data_n_1 [label=BV]
	comp_too -> _slow_a_1 [label=ARG1]
	"_because+of_p" -> "_prove_v_to-fn.Turning_out" [label=ARG1]
	"_prove_v_to-fn.Turning_out" -> _computer_n_1 [label="ARG1-fn.NotExist"]
	compound -> _device_n_1 [label=ARG1]
	_the_q -> _computer_n_1 [label=BV]
	udef_q -> _and_c [label=BV]
	compound -> _data_n_1 [label=ARG2]
	compound -> _storage_n_of [label=ARG1]
}
