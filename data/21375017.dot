digraph {
	node [shape=circle style=filled]
	_be_v_nv -> _but_c [label=ARG2]
	udef_q -> _quality_n_1 [label=BV]
	_at_p -> _bad_n_1 [label=ARG2]
	"_say_v_1-fn.IN" -> thing [label="ARG2-fn.Topic"]
	_viable_a_1 -> _market_n_1 [label=ARG1]
	"_think_v_1-fn.IN" -> pron [label="ARG1-fn.NotExist"]
	relative_mod -> neg [label=ARG2]
	comp_enough -> _appropriate_a_1 [label=ARG1]
	neg -> _at_p [label=ARG1]
	"_think_v_1-fn.IN" -> "_say_v_1-fn.IN" [label="ARG2-fn.NotExist"]
	compound -> _quality_n_1 [label=ARG2]
	"_say_v_1-fn.IN" -> pron [label="ARG1-fn.Agent"]
	_conscious_a_of -> _market_n_1 [label=ARG1]
	_all_q -> _bad_n_1 [label=BV]
	_still_a_1 -> _and_c [label=ARG1]
	_appropriate_a_1 -> _conscious_a_of [label=ARG1]
	pronoun_q -> pron [label=BV]
	compound -> _conscious_a_of [label=ARG1]
	_be_v_nv -> nominalization [label=ARG1]
	focus_d -> _be_v_nv [label=ARG2]
	"_say_v_to-fn.IN" -> _be_v_nv [label="ARG2-fn.Topic"]
	udef_q -> nominalization [label=BV]
	_troubled_a_1 -> _market_n_1 [label=ARG1]
	"_say_v_to-fn.IN" -> pron [label="ARG1-fn.Agent"]
	_quite_x -> _conscious_a_of [label=ARG1]
	_the_q -> _market_n_1 [label=BV]
	nominalization -> "_think_v_1-fn.IN" [label=ARG1]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
	which_q -> thing [label=BV]
}
