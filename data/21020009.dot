digraph {
	node [shape=circle style=filled]
	_if_x_then -> neg [label=ARG2]
	_if_x_then -> "_say_v_to-fn.Surpassing" [label=ARG1]
	_prompt_a_1 -> "_restructure_v_cause-fn.Left_to_do" [label=ARG1]
	poss -> _debt_n_1 [label=ARG1]
	"_say_v_to-fn.Surpassing" -> "named(Care)" [label="ARG1-fn.Standard_item"]
	parg_d -> pron [label=ARG2]
	"_restructure_v_cause-fn.Left_to_do" -> _debt_n_1 [label="ARG2-fn.Remainder"]
	"_require_v_of-fn.State_continue" -> pron [label="ARG2-fn.State"]
	def_explicit_q -> _debt_n_1 [label=BV]
	parg_d -> "_require_v_of-fn.State_continue" [label=ARG1]
	proper_q -> "named(Comprehensive)" [label=BV]
	"_would_v_modal-fn.Cause_to_end" -> "_require_v_of-fn.State_continue" [label="ARG1-fn.Process"]
	pronoun_q -> pron [label=BV]
	poss -> pron [label=ARG2]
	"_say_v_to-fn.Surpassing" -> "_would_v_modal-fn.Cause_to_end" [label="ARG2-fn.Profiled_item"]
	parg_d -> "_complete_v_2-fn.Competition" [label=ARG1]
	"_restructure_v_cause-fn.Left_to_do" -> pron [label="ARG1-fn.Process"]
	compound -> "named(Comprehensive)" [label=ARG2]
	compound -> "named(Care)" [label=ARG1]
	"_complete_v_2-fn.Competition" -> pron [label="ARG2-fn.Participant_2"]
	proper_q -> "named(Care)" [label=BV]
	neg -> "_complete_v_2-fn.Competition" [label=ARG1]
	"_require_v_of-fn.State_continue" -> "_restructure_v_cause-fn.Left_to_do" [label="ARG3-fn.Time"]
}
