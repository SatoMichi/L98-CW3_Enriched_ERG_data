digraph {
	node [shape=circle style=filled]
	compound -> _operation_n_of [label=ARG1]
	_the_q -> "named(Cross)" [label=BV]
	_after_p -> "_find_v_1-fn.IN" [label=ARG1]
	_for_p -> _strap_v_1 [label=ARG1]
	poss -> pron [label=ARG2]
	proper_q -> "named(American)" [label=BV]
	poss -> _operation_n_of [label=ARG1]
	_for_p -> _fund_n_1 [label=ARG2]
	"_in+order+to_x" -> _also_a_1 [label=ARG1]
	subord -> _strap_v_1 [label=ARG2]
	"_find_v_1-fn.IN" -> "named(Cross)" [label="ARG1-fn.NotExist"]
	_big_a_1 -> _operation_n_of [label=ARG1]
	_complicate_v_1 -> "named(Cross)" [label=ARG1]
	_fund_v_1 -> "named(Cross)" [label=ARG2]
	compound -> _relief_n_1 [label=ARG2]
	_complicate_v_1 -> _effort_n_1 [label=ARG2]
	compound -> "named(American)" [label=ARG2]
	_further_a_1 -> _complicate_v_1 [label=ARG1]
	udef_q -> _relief_n_1 [label=BV]
	parg_d -> _strap_v_1 [label=ARG1]
	pronoun_q -> pron [label=BV]
	def_explicit_q -> _operation_n_of [label=BV]
	compound -> "named(Hugo)" [label=ARG2]
	compound -> _effort_n_1 [label=ARG1]
	_also_a_1 -> subord [label=ARG1]
	subord -> "_find_v_1-fn.IN" [label=ARG1]
	udef_q -> _fund_n_1 [label=BV]
	proper_q -> "named(Hugo)" [label=BV]
	"_find_v_1-fn.IN" -> pron [label="ARG2-fn.NotExist"]
	proper_q -> "named(Red)" [label=BV]
	compound -> "named(Red)" [label=ARG2]
	_private_a_1 -> _fund_v_1 [label=ARG1]
	parg_d -> _fund_v_1 [label=ARG1]
	parg_d -> "named(Cross)" [label=ARG2]
	"_in+order+to_x" -> _complicate_v_1 [label=ARG2]
	compound -> "named(Cross)" [label=ARG1]
	_after_p -> _operation_n_of [label=ARG2]
	udef_q -> _effort_n_1 [label=BV]
}
