digraph {
	node [shape=circle style=filled]
	_if_x_then -> neg [label=ARG2]
	udef_q -> _sell_n_1 [label=BV]
	parg_d -> _burn_v_cause [label=ARG1]
	_of_p -> _sort_n_of [label=ARG1]
	"_know_v_1-fn.Quitting" -> pron [label="ARG1-fn.Employee"]
	"_give_v_1-fn.State_continue" -> _instruction_n_of [label="ARG2-fn.State"]
	which_q -> thing [label=BV]
	compound -> _instruction_n_of [label=ARG1]
	udef_q -> _buy_n_1 [label=BV]
	"much-many_a" -> _way_n_of [label=ARG1]
	_a_q -> _broker_n_1 [label=BV]
	udef_q -> _and_c [label=BV]
	_just_x_deg -> comp_equal [label=ARG1]
	compound -> _and_c [label=ARG2]
	"_give_v_1-fn.State_continue" -> _broker_n_1 [label="ARG3-fn.Time"]
	pronoun_q -> pron [label=BV]
	comp_equal -> "much-many_a" [label=ARG1]
	_way_n_of -> "_give_v_1-fn.State_continue" [label=ARG1]
	_all_q -> _sort_n_of [label=BV]
	"_know_v_1-fn.Quitting" -> "_do_v_1-fn.Piracy" [label="ARG2-fn.Employer"]
	"_do_v_1-fn.Piracy" -> pron [label="ARG1-fn.Perpetrator"]
	_if_x_then -> "_get_v_state-fn.State_continue" [label=ARG1]
	udef_q -> _way_n_of [label=BV]
	"_get_v_state-fn.State_continue" -> _burn_v_cause [label="ARG2-fn.State"]
	_way_n_of -> _if_x_then [label=ARG1]
	_of_p -> _way_n_of [label=ARG2]
	neg -> "_know_v_1-fn.Quitting" [label=ARG1]
	udef_q -> _instruction_n_of [label=BV]
	"_be_v_there-fn.Needing" -> _and_c [label="ARG1-fn.Cognizer"]
	"_do_v_1-fn.Piracy" -> thing [label="ARG2-fn.Vehicle"]
}
