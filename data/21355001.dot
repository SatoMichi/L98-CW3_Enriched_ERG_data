digraph {
	node [shape=circle style=filled]
	_able_a_1 -> pron [label=ARG1]
	proper_q -> "named(Property)" [label=BV]
	"_drop_v_cause-fn.Cause_to_end" -> _plan_n_1 [label="ARG2-fn.Means"]
	def_explicit_q -> _plan_n_1 [label=BV]
	proper_q -> "named(Capital)" [label=BV]
	_plan_n_1 -> "_liquidate/vb_u_unknown" [label=ARG1]
	_because_x -> "_say_v_to-fn.Cause_to_end" [label=ARG1]
	neg -> _able_a_1 [label=ARG1]
	"_drop_v_cause-fn.Cause_to_end" -> pron [label="ARG1-fn.Process"]
	pronoun_q -> pron [label=BV]
	"_expect_v_1-fn.Competition" -> pron [label="ARG1-fn.Participant_1"]
	"_realize_v_1-fn.Competition" -> pron [label="ARG1-fn.Participant_1"]
	poss -> pron [label=ARG2]
	udef_q -> _trust_n_1 [label=BV]
	poss -> _plan_n_1 [label=ARG1]
	compound -> _trust_n_1 [label=ARG1]
	"_realize_v_1-fn.Competition" -> _value_n_1 [label="ARG2-fn.Participant_2"]
	_the_q -> _value_n_1 [label=BV]
	_able_a_1 -> "_realize_v_1-fn.Competition" [label=ARG2]
	"_expect_v_1-fn.Competition" -> _value_n_1 [label="ARG2-fn.Participant_2"]
	compound -> "named(Capital)" [label=ARG1]
	"_say_v_to-fn.Cause_to_end" -> _trust_n_1 [label="ARG1-fn.Process"]
	compound -> "named(Property)" [label=ARG2]
	"_say_v_to-fn.Cause_to_end" -> "_drop_v_cause-fn.Cause_to_end" [label="ARG2-fn.Means"]
	_because_x -> neg [label=ARG2]
}
