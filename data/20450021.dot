digraph {
	node [shape=circle style=filled]
	_at_p -> _airport_n_1 [label=ARG2]
	"_say_v_to-fn.IN" -> "named(Seacomb)" [label="ARG1-fn.Agent"]
	proper_q -> "named(Criminal)" [label=BV]
	_mislay_v_1 -> _property_n_1 [label=ARG2]
	proper_q -> "named(Investigation)" [label=BV]
	"_mis-_a_error" -> _route_v_1 [label=ARG1]
	_for_x_cond -> neg [label=ARG1]
	compound -> "named(Criminal)" [label=ARG2]
	proper_q -> "named(Seacomb)" [label=BV]
	_of_p -> "named(Seacomb)" [label=ARG1]
	compound -> _inspector_n_1 [label=ARG1]
	_the_q -> _airport_n_1 [label=BV]
	proper_q -> "named(Peter)" [label=BV]
	_at_p -> "named(Department)" [label=ARG1]
	compound -> _chief_n_1 [label=ARG2]
	compound -> "named(Seacomb)" [label=ARG1]
	_of_p -> "named(Department)" [label=ARG2]
	parg_d -> _property_n_1 [label=ARG2]
	"_mis-_a_error" -> _rout_v_1 [label=ARG1]
	pronoun_q -> pron [label=BV]
	compound -> "named(Peter)" [label=ARG2]
	udef_q -> _chief_n_1 [label=BV]
	_route_v_1 -> _property_n_1 [label=ARG2]
	_the_q -> "named(Department)" [label=BV]
	udef_q -> _property_n_1 [label=BV]
	compound -> "named(Investigation)" [label=ARG1]
	parg_d -> _rout_v_1 [label=ARG1]
	"_say_v_to-fn.IN" -> _for_x_cond [label="ARG2-fn.Topic"]
	parg_d -> _mislay_v_1 [label=ARG1]
	_temporary_a_1 -> _mislay_v_1 [label=ARG1]
	_for_x_cond -> _or_c [label=ARG2]
	_rout_v_1 -> _property_n_1 [label=ARG2]
	neg -> _uncommon_a_1 [label=ARG1]
	compound -> "named(Department)" [label=ARG1]
	_uncommon_a_1 -> pron [label=ARG1]
	parg_d -> _route_v_1 [label=ARG1]
	udef_q -> _inspector_n_1 [label=BV]
}
