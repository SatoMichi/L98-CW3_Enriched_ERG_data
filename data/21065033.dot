digraph {
	node [shape=circle style=filled]
	proper_q -> "named(Lang)" [label=BV]
	"_instruct_v_on-fn.NF" -> pron [label="ARG2-fn.Recipient"]
	compound -> "named(Lang)" [label=ARG1]
	_when_x_subord -> "_say_v_to-fn.IN" [label=ARG1]
	compound -> _judge_n_of [label=ARG2]
	"_instruct_v_on-fn.NF" -> "named(Griesa)" [label="ARG1-fn.Agent"]
	compound -> _mister_n_1 [label=ARG2]
	_a_q -> _copy_n_of [label=BV]
	proper_q -> "named(Griesa)" [label=BV]
	"_say_v_to-fn.IN" -> "_instruct_v_on-fn.NF" [label="ARG2-fn.Topic"]
	"_release_v_1-fn.Releasing" -> pron [label="ARG1-fn.Cause"]
	udef_q -> _mister_n_1 [label=BV]
	udef_q -> _or_c [label=BV]
	udef_q -> _judge_n_of [label=BV]
	"_ask_v_for-fn.Request" -> _copy_n_of [label="ARG3-fn.NotExist"]
	"_release_v_1-fn.Releasing" -> _or_c [label="ARG2-fn.Theme"]
	pronoun_q -> pron [label=BV]
	proper_q -> "named(Thomas)" [label=BV]
	_copy_n_of -> _transcript_n_of [label=ARG1]
	parg_d -> "_ask_v_for-fn.Request" [label=ARG1]
	_when_x_subord -> "_ask_v_for-fn.Request" [label=ARG2]
	neg -> "_release_v_1-fn.Releasing" [label=ARG1]
	compound -> "named(P)" [label=ARG1]
	_the_q -> _memorandum_n_1 [label=BV]
	"_say_v_to-fn.IN" -> "named(Lang)" [label="ARG1-fn.Agent"]
	"_instruct_v_on-fn.NF" -> neg [label="ARG3-fn.Topic"]
	_the_q -> _transcript_n_of [label=BV]
	compound -> "named(Griesa)" [label=ARG1]
	compound -> "named(Thomas)" [label=ARG2]
	proper_q -> "named(P)" [label=BV]
}
