digraph {
	node [shape=circle style=filled]
	_long_a_1 -> _haul_n_1 [label=ARG1]
	compound -> "named(Jones)" [label=ARG1]
	focus_d -> "_say_v_to-fn.Have_as_requirement" [label=ARG1]
	_the_q -> _business_n_1 [label=BV]
	compound -> _work_n_1 [label=ARG2]
	udef_q -> _work_n_1 [label=BV]
	_the_q -> _haul_n_1 [label=BV]
	"_seem_v_to-fn.Desiring" -> "_support_v_1-fn.Amounting_to" [label="ARG2-fn.Event"]
	"_support_v_1-fn.Amounting_to" -> _style_n_of [label="ARG1-fn.Value"]
	pronoun_q -> pron [label=BV]
	poss -> pron [label=ARG2]
	"_support_v_1-fn.Amounting_to" -> generic_entity [label="ARG2-fn.Attribute"]
	poss -> _style_n_of [label=ARG1]
	def_explicit_q -> _part_n_1 [label=BV]
	proper_q -> "named(Jerry)" [label=BV]
	compound -> _style_n_of [label=ARG1]
	compound -> "named(Jerry)" [label=ARG2]
	proper_q -> "named(Jones)" [label=BV]
	_for_p -> _haul_n_1 [label=ARG2]
	def_explicit_q -> _style_n_of [label=BV]
	_in_p -> _business_n_1 [label=ARG2]
	_for_p -> _in_p [label=ARG1]
	"_say_v_to-fn.Have_as_requirement" -> _in_p [label="ARG2-fn.Requirement"]
	_for_p -> _part_n_1 [label=ARG2]
	focus_d -> _for_p [label=ARG2]
	_that_q_dem -> generic_entity [label=BV]
	"_say_v_to-fn.Have_as_requirement" -> "named(Jones)" [label="ARG1-fn.Dependent"]
	_in_p -> pron [label=ARG1]
	_for_p -> "_say_v_to-fn.Have_as_requirement" [label=ARG1]
	poss -> _part_n_1 [label=ARG1]
}
