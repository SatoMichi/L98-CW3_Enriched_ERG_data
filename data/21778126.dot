digraph {
	node [shape=circle style=filled]
	_on_p -> "_stand_v_1-fn.Expectation" [label=ARG1]
	"_notice_v_1-fn.Competition" -> _and_c [label="ARG2-fn.Participant_2"]
	_while_x -> "_notice_v_1-fn.Competition" [label=ARG1]
	subord -> "_wait_v_for-fn.Needing" [label=ARG2]
	_while_x -> subord [label=ARG2]
	"_slither_v_1-fn.Attack" -> part_of [label="ARG1-fn.Victim"]
	_all_q -> part_of [label=BV]
	_on_p -> _lawn_n_1 [label=ARG2]
	_with_p -> "_stand_v_1-fn.Expectation" [label=ARG1]
	pronoun_q -> pron [label=BV]
	"_wait_v_for-fn.Needing" -> _tremor_n_1 [label="ARG2-fn.Requirement"]
	"_notice_v_1-fn.Competition" -> pron [label="ARG1-fn.Participant_1"]
	part_of -> _earthworm_n_1 [label=ARG1]
	"_emerge_v_1-fn.Competition" -> part_of [label="ARG1-fn.Participant_1"]
	_across_p -> _lawn_n_1 [label=ARG2]
	_the_q -> _earthworm_n_1 [label=BV]
	subord -> "_stand_v_1-fn.Expectation" [label=ARG1]
	_the_q -> _ground_n_1 [label=BV]
	_from_p -> "_emerge_v_1-fn.Competition" [label=ARG1]
	_the_q -> _lawn_n_1 [label=BV]
	_another_q -> _tremor_n_1 [label=BV]
	_across_p -> "_slither_v_1-fn.Attack" [label=ARG1]
	proper_q -> "named(Mame)" [label=BV]
	_with_p -> "named(Mame)" [label=ARG2]
	"_stand_v_1-fn.Expectation" -> pron [label="ARG1-fn.Cognizer"]
	_from_p -> _ground_n_1 [label=ARG2]
}
