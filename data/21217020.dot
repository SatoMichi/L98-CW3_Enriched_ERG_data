digraph {
	node [shape=circle style=filled]
	def_implicit_q -> _month_n_1 [label=BV]
	"_say_v_to-fn.Have_as_requirement" -> _source_n_of [label="ARG1-fn.Dependent"]
	_in_p -> "named_n(US)" [label=ARG2]
	_the_q -> "named_n(US)" [label=BV]
	"_slash_v_at-fn.Cause_to_end" -> "named(Mobil)" [label="ARG1-fn.Process"]
	focus_d -> "_say_v_to-fn.Have_as_requirement" [label=ARG1]
	def_explicit_q -> _force_n_1 [label=BV]
	udef_q -> _source_n_of [label=BV]
	compound -> _work_n_1 [label=ARG2]
	comp_equal -> _soon_p [label=ARG1]
	"_slash_v_at-fn.Cause_to_end" -> _force_n_1 [label="ARG2-fn.Means"]
	udef_q -> _work_n_1 [label=BV]
	_next_a_1 -> _month_n_1 [label=ARG1]
	comp_equal -> _month_n_1 [label=ARG2]
	compound -> _force_n_1 [label=ARG1]
	proper_q -> "named(Mobil)" [label=BV]
	pronoun_q -> pron [label=BV]
	poss -> pron [label=ARG2]
	_soon_p -> time_n [label=ARG1]
	focus_d -> "_prepare_v_1-fn.State_continue" [label=ARG2]
	loc_nonsp -> "_slash_v_at-fn.Cause_to_end" [label=ARG1]
	"_prepare_v_1-fn.State_continue" -> "_slash_v_at-fn.Cause_to_end" [label="ARG2-fn.State"]
	poss -> _force_n_1 [label=ARG1]
	"_say_v_to-fn.Have_as_requirement" -> "_prepare_v_1-fn.State_continue" [label="ARG2-fn.Requirement"]
	loc_nonsp -> time_n [label=ARG2]
	_in_p -> "_slash_v_at-fn.Cause_to_end" [label=ARG1]
	"_prepare_v_1-fn.State_continue" -> "named(Mobil)" [label="ARG1-fn.Entity"]
	def_implicit_q -> time_n [label=BV]
}
