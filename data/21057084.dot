digraph {
	node [shape=circle style=filled]
	poss -> "named(ESPN)" [label=ARG2]
	def_explicit_q -> "named(Werner)" [label=BV]
	"_say_v_to-fn.IN" -> "named(Werner)" [label="ARG1-fn.NotExist"]
	_a_q -> _guarantee_n_of [label=BV]
	_be_v_id -> _trial_n_1 [label=ARG1]
	proper_q -> "named(ESPN)" [label=BV]
	_the_q -> _control_n_of [label=BV]
	compound -> _mister_n_1 [label=ARG2]
	_sophisticated_a_1 -> _viewer_n_of [label=ARG1]
	_be_v_id -> _guarantee_n_of [label=ARG2]
	focus_d -> _in_p_state [label=ARG2]
	_this_q_dem -> _market_n_1 [label=BV]
	udef_q -> _mister_n_1 [label=BV]
	_in_p_state -> _be_v_id [label=ARG1]
	_of_p -> _market_n_1 [label=ARG1]
	udef_q -> _viewer_n_of [label=BV]
	udef_q -> implicit_conj [label=BV]
	_remote_a_1 -> _control_n_of [label=ARG1]
	poss -> "named(Werner)" [label=ARG1]
	_in_p_state -> _market_n_1 [label=ARG2]
	focus_d -> _be_v_id [label=ARG1]
	udef_q -> _trial_n_1 [label=BV]
	"card(40)" -> _channel_n_1 [label=ARG1]
	_of_p -> implicit_conj [label=ARG2]
	neg -> _be_v_id [label=ARG1]
	_guarantee_n_of -> thing [label=ARG1]
	udef_q -> _channel_n_1 [label=BV]
	udef_q -> _and_c [label=BV]
	"_say_v_to-fn.IN" -> neg [label="ARG2-fn.NotExist"]
	compound -> "named(Werner)" [label=ARG1]
	_any_q -> thing [label=BV]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
