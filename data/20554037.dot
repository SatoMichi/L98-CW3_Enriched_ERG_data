digraph {
	node [shape=circle style=filled]
	_to_p -> _return_v_1 [label=ARG1]
	_vindicate_v_1 -> pron [label=ARG2]
	poss -> pron [label=ARG2]
	_the_q -> _end_n_of [label=BV]
	_at_p -> _end_n_of [label=ARG2]
	compound -> _mister_n_1 [label=ARG2]
	parg_d -> _vindicate_v_1 [label=ARG1]
	_the_q -> _trial_n_1 [label=BV]
	"_say_v_to-fn.IN" -> pron [label="ARG1-fn.NotExist"]
	udef_q -> _mister_n_1 [label=BV]
	poss -> _post_n_of [label=ARG1]
	_at_p -> _vindicate_v_1 [label=ARG1]
	_at_p -> _trial_n_1 [label=ARG2]
	_at_p -> _return_v_1 [label=ARG1]
	parg_d -> pron [label=ARG2]
	pronoun_q -> pron [label=BV]
	"_say_v_to-fn.IN" -> _return_v_1 [label="ARG2-fn.NotExist"]
	_to_p -> _post_n_of [label=ARG2]
	compound -> "named(Klein)" [label=ARG1]
	proper_q -> "named(Klein)" [label=BV]
	def_explicit_q -> _post_n_of [label=BV]
	_end_n_of -> _trial_n_1 [label=ARG1]
	_return_v_1 -> "named(Klein)" [label=ARG1]
}
