digraph {
	node [shape=circle style=filled]
	compound -> _program_n_of [label=ARG2]
	"_say_v_to-fn.IN" -> "named(Fields)" [label="ARG1-fn.Agent"]
	focus_d -> "_think_v_1-fn.IN" [label=ARG2]
	"_think_v_1-fn.IN" -> _basic_a_1 [label="ARG2-fn.NotExist"]
	"_think_v_1-fn.IN" -> pron [label="ARG1-fn.NotExist"]
	_the_q -> _investor_n_1 [label=BV]
	udef_q -> _program_n_of [label=BV]
	_unfair_a_to -> _investor_n_1 [label=ARG2]
	compound -> "named(Leo)" [label=ARG2]
	"_say_v_to-fn.IN" -> "_think_v_1-fn.IN" [label="ARG2-fn.Topic"]
	nominalization -> _trade_v_1 [label=ARG1]
	pronoun_q -> pron [label=BV]
	_individual_a_1 -> _investor_n_1 [label=ARG1]
	appos -> "named(Fields)" [label=ARG1]
	proper_q -> "named(Fields)" [label=BV]
	compound -> "named(Dallas)" [label=ARG2]
	udef_q -> nominalization [label=BV]
	compound -> _investor_n_1 [label=ARG1]
	compound -> "named(Fields)" [label=ARG1]
	appos -> _investor_n_1 [label=ARG2]
	proper_q -> "named(Dallas)" [label=BV]
	_basic_a_1 -> _unfair_a_to [label=ARG1]
	proper_q -> "named(Leo)" [label=BV]
	_a_q -> _investor_n_1 [label=BV]
	_unfair_a_to -> nominalization [label=ARG1]
	compound -> nominalization [label=ARG1]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
