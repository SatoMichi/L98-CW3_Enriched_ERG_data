digraph {
	node [shape=circle style=filled]
	"_say_v_to-fn.IN" -> "named(Brady)" [label="ARG1-fn.Agent"]
	_determine_v_1 -> "named(Group)" [label=ARG1]
	compound -> "named(Brady)" [label=ARG1]
	compound -> "named(Financial)" [label=ARG2]
	compound -> _margin_n_1 [label=ARG1]
	compound -> _mister_n_1 [label=ARG2]
	"_ask_v_1-fn.Request" -> _determine_v_1 [label="ARG3-fn.NotExist"]
	"_ask_v_1-fn.Request" -> "named(Group)" [label="ARG2-fn.NotExist"]
	udef_q -> _margin_n_1 [label=BV]
	udef_q -> _mister_n_1 [label=BV]
	compound -> _future_n_1 [label=ARG2]
	"_ask_v_1-fn.Request" -> pron [label="ARG1-fn.NotExist"]
	compound -> "named(Working)" [label=ARG2]
	proper_q -> "named(Brady)" [label=BV]
	compound -> "named(Group)" [label=ARG1]
	pronoun_q -> pron [label=BV]
	proper_q -> "named(Financial)" [label=BV]
	_on_p -> "named(Group)" [label=ARG1]
	_low_a_on -> _margin_n_1 [label=ARG1]
	"_say_v_to-fn.IN" -> "_ask_v_1-fn.Request" [label="ARG2-fn.Topic"]
	_the_q -> "named(Group)" [label=BV]
	udef_q -> _future_n_1 [label=BV]
	proper_q -> "named(Markets)" [label=BV]
	_determine_v_1 -> _low_a_on [label=ARG2]
	proper_q -> "named(Working)" [label=BV]
	_on_p -> "named(Markets)" [label=ARG2]
	_separate_a_from -> "_say_v_to-fn.IN" [label=ARG1]
	compound -> "named(Markets)" [label=ARG1]
	comp_too -> _low_a_on [label=ARG1]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
