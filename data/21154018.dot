digraph {
	node [shape=circle style=filled]
	"_count_v_on-fn.Halt" -> pron [label="ARG2-fn.Place"]
	parg_d -> "_count_v_on-fn.Halt" [label=ARG1]
	"_in+order+to_x" -> "_count_v_on-fn.Halt" [label=ARG1]
	temp_loc_x -> "_up+to_p" [label=ARG1]
	temp_loc_x -> temp [label=ARG2]
	"_have_v_1-fn.Competition" -> pron [label="ARG1-fn.Participant_1"]
	parg_d -> pron [label=ARG2]
	"_can_v_modal-fn.Existence" -> "_in+order+to_x" [label="ARG1-fn.Entity"]
	_either_q -> generic_entity [label=BV]
	neg -> "_up+to_p" [label=ARG1]
	loc_nonsp -> temp [label=ARG2]
	poss -> _own_n_1 [label=ARG1]
	_a_q -> _life_n_of [label=BV]
	pronoun_q -> pron [label=BV]
	poss -> pron [label=ARG2]
	"_up+to_p" -> _cast_n_1 [label=ARG1]
	loc_nonsp -> "_perform_v_1-fn.Competition" [label=ARG1]
	def_explicit_q -> _own_n_1 [label=BV]
	free_relative_ever_q -> temp [label=BV]
	"_in+order+to_x" -> _and_c [label=ARG2]
	"_look_v_seem-to-fn.Needing" -> "_good_a_at-for-of" [label="ARG2-fn.Requirement"]
	_a_q -> _cast_n_1 [label=BV]
	"_have_v_1-fn.Competition" -> _life_n_of [label="ARG2-fn.Participant_2"]
	"_up+to_p" -> generic_entity [label=ARG2]
	"_look_v_seem-to-fn.Needing" -> pron [label="ARG1-fn.Cognizer"]
	_life_n_of -> _own_n_1 [label=ARG1]
	"_perform_v_1-fn.Competition" -> pron [label="ARG1-fn.Participant_1"]
	"_good_a_at-for-of" -> pron [label=ARG1]
}
