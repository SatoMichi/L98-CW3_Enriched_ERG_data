digraph {
	node [shape=circle style=filled]
	"_find_v_1-fn.IN" -> pron [label="ARG1-fn.NotExist"]
	"_get_v_state-fn.IN" -> pron [label="ARG1-fn.NotExist"]
	udef_q -> generic_entity [label=BV]
	_if_x_then -> _display_v_to [label=ARG1]
	_against_p -> "named(Worms)" [label=ARG1]
	"_say_v_1-fn.IN" -> "named(Worms)" [label="ARG2-fn.NotExist"]
	"_get_v_state-fn.IN" -> _into_p [label="ARG2-fn.Patient"]
	_nuclear_a_1 -> _killer_n_1 [label=ARG1]
	"_find_v_1-fn.IN" -> generic_entity [label="ARG2-fn.NotExist"]
	"_say_v_1-fn.IN" -> _screen_n_1 [label="ARG1-fn.NotExist"]
	temp_loc_x -> _log_v_on [label=ARG1]
	pronoun_q -> pron [label=BV]
	_display_v_to -> _screen_n_1 [label=ARG2]
	temp_loc_x -> temp [label=ARG2]
	loc_nonsp -> temp [label=ARG2]
	_log_v_on -> _user_n_of [label=ARG1]
	_a_q -> _user_n_of [label=BV]
	_display_v_to -> pron [label=ARG1]
	_into_p -> _system_n_of [label=ARG2]
	udef_q -> "named(Worms)" [label=BV]
	_a_q -> _screen_n_1 [label=BV]
	_if_x_then -> _and_c [label=ARG2]
	"card(1)" -> generic_entity [label=ARG1]
	_the_q -> _system_n_of [label=BV]
	_against_p -> _killer_n_1 [label=ARG2]
	loc_nonsp -> _screen_n_1 [label=ARG1]
	_into_p -> pron [label=ARG1]
	udef_q -> _killer_n_1 [label=BV]
	free_relative_q -> temp [label=BV]
}
