digraph {
	node [shape=circle style=filled]
	_on_p -> _court_n_of [label=ARG2]
	def_explicit_q -> _concern_n_1 [label=BV]
	poss -> pron [label=ARG2]
	_of_p -> _lawyer_n_1 [label=ARG2]
	compound -> _lawyer_n_1 [label=ARG1]
	"_say_v_to-fn.IN" -> "named(Raines)" [label="ARG1-fn.Agent"]
	_confirm_v_as -> _judgment_n_1 [label=ARG1]
	_the_q -> _judgment_n_1 [label=BV]
	_the_q -> _court_n_of [label=BV]
	_confirm_v_as -> _concern_n_1 [label=ARG2]
	compound -> _ms_n_1 [label=ARG2]
	_of_p -> _absence_n_1 [label=ARG1]
	"_say_v_to-fn.IN" -> _confirm_v_as [label="ARG2-fn.Topic"]
	compound -> _patent_n_of [label=ARG2]
	udef_q -> _patent_n_of [label=BV]
	pronoun_q -> pron [label=BV]
	udef_q -> _ms_n_1 [label=BV]
	poss -> _concern_n_1 [label=ARG1]
	_the_q -> _absence_n_1 [label=BV]
	udef_q -> _lawyer_n_1 [label=BV]
	"_prove_v_to-fn.Turning_out" -> _troublesome_a_1 [label="ARG2-fn.Theme"]
	_troublesome_a_1 -> _absence_n_1 [label=ARG1]
	_could_v_modal -> "_prove_v_to-fn.Turning_out" [label=ARG1]
	"_prove_v_to-fn.Turning_out" -> _absence_n_1 [label="ARG1-fn.NotExist"]
	_on_p -> _absence_n_1 [label=ARG1]
	_concern_n_1 -> _could_v_modal [label=ARG1]
	compound -> "named(Raines)" [label=ARG1]
	proper_q -> "named(Raines)" [label=BV]
}
