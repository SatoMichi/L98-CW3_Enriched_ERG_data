digraph {
	node [shape=circle style=filled]
	def_explicit_q -> _lawyer_n_1 [label=BV]
	"_refer_v_to-fn.NF" -> _firm_n_1 [label="ARG3-fn.Recipient"]
	poss -> pron [label=ARG2]
	"_require_v_of-fn.NF" -> _matter_n_of [label="ARG1-fn.Pivot"]
	"_refer_v_to-fn.NF" -> _lawyer_n_1 [label="ARG1-fn.Agent"]
	_legal_a_1 -> _work_n_1 [label=ARG1]
	compound -> _mister_n_1 [label=ARG2]
	_a_q -> _firm_n_1 [label=BV]
	udef_q -> _litigation_n_1 [label=BV]
	udef_q -> _mister_n_1 [label=BV]
	"_require_v_of-fn.NF" -> _or_c [label="ARG2-fn.Theme"]
	"_refer_v_to-fn.NF" -> _client_n_1 [label="ARG2-fn.Theme"]
	_the_q -> _matter_n_of [label=BV]
	udef_q -> _law_n_1 [label=BV]
	udef_q -> _or_c [label=BV]
	_may_v_modal -> "_refer_v_to-fn.NF" [label=ARG1]
	compound -> "named(Cane)" [label=ARG1]
	_if_x_then -> "_say_v_to-fn.IN" [label=ARG1]
	pronoun_q -> pron [label=BV]
	_the_q -> _client_n_1 [label=BV]
	comp -> _further_a_1 [label=ARG1]
	"_say_v_to-fn.IN" -> "named(Cane)" [label="ARG1-fn.Agent"]
	"_say_v_to-fn.IN" -> _may_v_modal [label="ARG2-fn.NotExist"]
	compound -> _firm_n_1 [label=ARG1]
	_if_x_then -> "_require_v_of-fn.NF" [label=ARG2]
	proper_q -> "named(Cane)" [label=BV]
	compound -> _law_n_1 [label=ARG2]
	_further_a_1 -> _work_n_1 [label=ARG1]
	poss -> _lawyer_n_1 [label=ARG1]
	udef_q -> _work_n_1 [label=BV]
}
