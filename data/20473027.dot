digraph {
	node [shape=circle style=filled]
	compound -> _pipeline_n_1 [label=ARG1]
	compound -> "named(Line)" [label=ARG1]
	parg_d -> _rumor_v_1 [label=ARG1]
	_of_p -> _own_n_1 [label=ARG2]
	poss -> pron [label=ARG2]
	_that_q_dem -> generic_entity [label=BV]
	compound -> _company_n_1 [label=ARG2]
	_a_q -> _operator_n_of [label=BV]
	_mull_v_1 -> _proposal_n_1 [label=ARG2]
	compound -> _gas_n_1 [label=ARG2]
	_rumor_v_1 -> _mull_v_1 [label=ARG2]
	_the_q -> _card_n_1 [label=BV]
	def_explicit_q -> _own_n_1 [label=BV]
	_of_p -> _proposal_n_1 [label=ARG1]
	poss -> _own_n_1 [label=ARG1]
	compound -> "named(Interprovincial)" [label=ARG2]
	proper_q -> "named(Line)" [label=BV]
	compound -> _oil_n_1 [label=ARG2]
	pronoun_q -> pron [label=BV]
	parg_d -> _operator_n_of [label=ARG2]
	udef_q -> _gas_n_1 [label=BV]
	compound -> _operator_n_of [label=ARG1]
	udef_q -> _oil_n_1 [label=BV]
	appos -> _operator_n_of [label=ARG2]
	proper_q -> "named(Pipe)" [label=BV]
	udef_q -> _pipeline_n_1 [label=BV]
	proper_q -> "named(Interprovincial)" [label=BV]
	appos -> "named(Line)" [label=ARG1]
	neg -> _in_p [label=ARG1]
	_in_p -> generic_entity [label=ARG1]
	compound -> _proposal_n_1 [label=ARG1]
	"_say_v_to-fn.IN" -> "named(Line)" [label="ARG1-fn.NotExist"]
	"_say_v_to-fn.IN" -> neg [label="ARG2-fn.NotExist"]
	udef_q -> _company_n_1 [label=BV]
	compound -> "named(Pipe)" [label=ARG1]
	_a_q -> _proposal_n_1 [label=BV]
	_mull_v_1 -> _operator_n_of [label=ARG1]
	_in_p -> _card_n_1 [label=ARG2]
}
