digraph {
	node [shape=circle style=filled]
	udef_q -> _expansion_n_1 [label=BV]
	"_argue_v_with-fn.Avoiding" -> _analyst_n_1 [label="ARG1-fn.Agent"]
	"_eat_v_up-fn.Gathering_up" -> _cash_n_1 [label="ARG2-fn.Agent"]
	udef_q -> _cash_n_1 [label=BV]
	_some_q -> _analyst_n_1 [label=BV]
	"_continue_v_1-fn.State_continue" -> _program_n_of [label="ARG1-fn.Entity"]
	compound -> _capacity_n_1 [label=ARG2]
	_because_x -> neg [label=ARG1]
	"_eat_v_up-fn.Gathering_up" -> _program_n_of [label="ARG1-fn.Aggregate"]
	poss -> _industry_n_1 [label=ARG2]
	udef_q -> _takeover_n_of [label=BV]
	poss -> _program_n_of [label=ARG1]
	compound -> _program_n_of [label=ARG1]
	"_be_v_there-fn.Needing" -> _flurry_n_of [label="ARG1-fn.Cognizer"]
	neg -> "_be_v_there-fn.Needing" [label=ARG1]
	_flurry_n_of -> _takeover_n_of [label=ARG1]
	"_argue_v_with-fn.Avoiding" -> _because_x [label="ARG2-fn.Place"]
	_because_x -> "_eat_v_up-fn.Gathering_up" [label=ARG2]
	def_explicit_q -> _program_n_of [label=BV]
	_available_a_1 -> _cash_n_1 [label=ARG1]
	compound -> _expansion_n_1 [label=ARG1]
	udef_q -> _capacity_n_1 [label=BV]
	_a_q -> _flurry_n_of [label=BV]
	_the_q -> _industry_n_1 [label=BV]
}
