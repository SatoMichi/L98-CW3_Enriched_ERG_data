digraph {
	node [shape=circle style=filled]
	_subject_a_to -> pron [label=ARG1]
	_full_a_of -> _offer_n_1 [label=ARG1]
	_substantial_a_1 -> _uncertainty_n_1 [label=ARG1]
	udef_q -> _uncertainty_n_1 [label=BV]
	udef_q -> _partnership_n_1 [label=BV]
	_by_p -> _offer_n_1 [label=ARG1]
	_subject_a_to -> _uncertainty_n_1 [label=ARG2]
	proper_q -> "named(Lionel)" [label=BV]
	compound -> "named(I)" [label=ARG1]
	_full_a_of -> _condition_n_1 [label=ARG2]
	pronoun_q -> pron [label=BV]
	compound -> _partnership_n_1 [label=ARG1]
	"_say_v_to-fn.Have_as_requirement" -> "named(Lionel)" [label="ARG1-fn.Dependent"]
	_by_p -> _partnership_n_1 [label=ARG2]
	compound -> "named(Robert)" [label=ARG2]
	compound -> "named(Toussie)" [label=ARG2]
	proper_q -> "named(Toussie)" [label=BV]
	compound -> "named(Limited)" [label=ARG1]
	_inadequate_a_1 -> _offer_n_1 [label=ARG1]
	"_say_v_to-fn.Have_as_requirement" -> _and_c [label="ARG2-fn.Requirement"]
	"_leave_v_1-fn.State_continue" -> _subject_a_to [label="ARG3-fn.Time"]
	_the_q -> _offer_n_1 [label=BV]
	udef_q -> _condition_n_1 [label=BV]
	proper_q -> "named(Limited)" [label=BV]
	proper_q -> "named(Robert)" [label=BV]
	proper_q -> "named(I)" [label=BV]
	_also_a_1 -> "_say_v_to-fn.Have_as_requirement" [label=ARG1]
	"_leave_v_1-fn.State_continue" -> pron [label="ARG2-fn.State"]
	"_leave_v_1-fn.State_continue" -> _condition_n_1 [label="ARG1-fn.Entity"]
}
