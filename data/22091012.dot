digraph {
	node [shape=circle style=filled]
	compound -> _system_n_of [label=ARG1]
	_for_p -> _demand_n_1 [label=ARG1]
	"_say_v_to-fn.Have_as_requirement" -> _official_n_1 [label="ARG1-fn.Dependent"]
	"_reflect_v_1-fn.Cause_to_end" -> _demand_n_1 [label="ARG2-fn.Means"]
	compound -> _application_n_of [label=ARG1]
	_high_a_1 -> _demand_n_1 [label=ARG1]
	udef_q -> nominalization [label=BV]
	"_continue_v_1-fn.State_continue" -> _demand_n_1 [label="ARG1-fn.Entity"]
	nominalization -> _operate_v_1 [label=ARG1]
	proper_q -> "named(Microsoft)" [label=BV]
	compound -> nominalization [label=ARG2]
	def_explicit_q -> _and_c [label=BV]
	pronoun_q -> pron [label=BV]
	poss -> pron [label=ARG2]
	poss -> _and_c [label=ARG1]
	_the_q -> _result_n_of [label=BV]
	udef_q -> _demand_n_1 [label=BV]
	compound -> _official_n_1 [label=ARG1]
	_strong_a_1 -> _result_n_of [label=ARG1]
	compound -> _software_n_1 [label=ARG2]
	_also_a_1 -> "_reflect_v_1-fn.Cause_to_end" [label=ARG1]
	udef_q -> _system_n_of [label=BV]
	udef_q -> _application_n_of [label=BV]
	"_reflect_v_1-fn.Cause_to_end" -> _result_n_of [label="ARG1-fn.Process"]
	compound -> "named(Microsoft)" [label=ARG2]
	udef_q -> _official_n_1 [label=BV]
	udef_q -> _software_n_1 [label=BV]
	"_say_v_to-fn.Have_as_requirement" -> _also_a_1 [label="ARG2-fn.Requirement"]
	_for_p -> _and_c [label=ARG2]
}
