digraph {
	node [shape=circle style=filled]
	"_say_v_to-fn.Have_as_requirement" -> _manager_n_of [label="ARG1-fn.Dependent"]
	compound -> _fund_n_1 [label=ARG2]
	udef_q -> _insurance_n_1 [label=BV]
	udef_q -> _market_n_1 [label=BV]
	udef_q -> _direction_n_of [label=BV]
	compound -> _market_n_1 [label=ARG2]
	udef_q -> _fund_n_1 [label=BV]
	_difficult_a_for -> "_read_v_1-fn.Required_event" [label=ARG1]
	compound -> _life_n_of [label=ARG2]
	_a_q -> _company_n_of [label=BV]
	compound -> _company_n_of [label=ARG1]
	compound -> _insurance_n_1 [label=ARG1]
	_a_q -> _manager_n_of [label=BV]
	udef_q -> _life_n_of [label=BV]
	"_say_v_to-fn.Have_as_requirement" -> "_make_v_cause-fn.Cause_to_end" [label="ARG2-fn.Requirement"]
	"_read_v_1-fn.Required_event" -> _direction_n_of [label="ARG2-fn.Negative_consequences"]
	_at_p -> _company_n_of [label=ARG2]
	_at_p -> _manager_n_of [label=ARG1]
	compound -> _direction_n_of [label=ARG1]
	"card(3)" -> _factor_n_1 [label=ARG1]
	udef_q -> _factor_n_1 [label=BV]
	"_make_v_cause-fn.Cause_to_end" -> _difficult_a_for [label="ARG2-fn.Means"]
	"_make_v_cause-fn.Cause_to_end" -> _factor_n_1 [label="ARG1-fn.Process"]
	compound -> _manager_n_of [label=ARG1]
}
