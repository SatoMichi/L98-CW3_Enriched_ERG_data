digraph {
	node [shape=circle style=filled]
	"_say_v_to-fn.IN" -> "named(IATA)" [label="ARG1-fn.Agent"]
	"_say_v_to-fn.IN" -> "_receive_v_1-fn.Receiving" [label="ARG2-fn.Topic"]
	parg_d -> _revenue_n_1 [label=ARG2]
	compound -> "named(Control)" [label=ARG2]
	_to_p -> _revenue_n_1 [label=ARG1]
	"_link_v_1-fn.Make_cognitive_connection" -> _to_p [label="ARG3-fn.NotExist"]
	_the_q -> _number_n_of [label=BV]
	"_serve_v_as-fn.NF" -> _software_n_1 [label="ARG1-fn.Agent"]
	proper_q -> "named(Control)" [label=BV]
	"_serve_v_as-fn.NF" -> _passenger_n_1 [label="ARG2-fn.NotExist"]
	_number_n_of -> _passenger_n_1 [label=ARG1]
	udef_q -> _passenger_n_1 [label=BV]
	_the_q -> _software_n_1 [label=BV]
	parg_d -> "_link_v_1-fn.Make_cognitive_connection" [label=ARG1]
	parg_d -> "_serve_v_as-fn.NF" [label=ARG1]
	_to_p -> _number_n_of [label=ARG2]
	udef_q -> _revenue_n_1 [label=BV]
	parg_d -> _passenger_n_1 [label=ARG2]
	proper_q -> "named(Data)" [label=BV]
	"_receive_v_1-fn.Receiving" -> _revenue_n_1 [label="ARG2-fn.Theme"]
	compound -> "named(Data)" [label=ARG1]
	"_link_v_1-fn.Make_cognitive_connection" -> _revenue_n_1 [label="ARG2-fn.Patient"]
	proper_q -> "named(IATA)" [label=BV]
	focus_d -> "_receive_v_1-fn.Receiving" [label=ARG2]
	"_receive_v_1-fn.Receiving" -> "named(Data)" [label="ARG1-fn.Agent"]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
