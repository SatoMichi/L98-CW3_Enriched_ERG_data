digraph {
	node [shape=circle style=filled]
	_current_a_1 -> _advantage_n_1 [label=ARG1]
	_despite_p -> _advantage_n_1 [label=ARG2]
	compound -> "named(New)" [label=ARG2]
	_even_x_deg -> _some_q [label=ARG1]
	proper_q -> "named(New)" [label=BV]
	pronoun_q -> pron [label=BV]
	poss -> pron [label=ARG2]
	def_explicit_q -> _advantage_n_1 [label=BV]
	_with_p -> "named(Guard)" [label=ARG2]
	compound -> "named(Guard)" [label=ARG1]
	"_seem_v_to-fn.Needing" -> "_concede_v_to-fn.Quitting" [label="ARG2-fn.Requirement"]
	proper_q -> "named(Old)" [label=BV]
	_with_p -> "_belong_v_to-fn.Cause_to_end" [label=ARG1]
	"_concede_v_to-fn.Quitting" -> "_belong_v_to-fn.Cause_to_end" [label="ARG2-fn.Employer"]
	_the_q -> _future_n_1 [label=BV]
	compound -> "named(Old)" [label=ARG2]
	_despite_p -> _member_n_of [label=ARG1]
	_member_n_of -> "named(Guard)" [label=ARG1]
	"_belong_v_to-fn.Cause_to_end" -> _future_n_1 [label="ARG1-fn.Process"]
	poss -> _advantage_n_1 [label=ARG1]
	_some_q -> _member_n_of [label=BV]
	"_concede_v_to-fn.Quitting" -> _member_n_of [label="ARG1-fn.Employee"]
	_the_q -> "named(Guard)" [label=BV]
}
