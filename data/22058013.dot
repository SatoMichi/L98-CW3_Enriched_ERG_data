digraph {
	node [shape=circle style=filled]
	_the_q -> generic_entity [label=BV]
	appos -> _editor_n_1 [label=ARG2]
	"_such+as_p" -> generic_entity [label=ARG2]
	_senior_a_1 -> _editor_n_1 [label=ARG1]
	udef_q -> _trade_n_of [label=BV]
	proper_q -> "named(Alexander)" [label=BV]
	compound -> _publication_n_1 [label=ARG1]
	_by_p_means -> nominalization [label=ARG2]
	udef_q -> generic_entity [label=BV]
	parg_d -> "_tell_v_1-fn.Telling" [label=ARG1]
	udef_q -> _password_n_1 [label=BV]
	_a_q -> _center_n_of [label=BV]
	_by_p_means -> "_get_v_state-fn.IN" [label=ARG1]
	appos -> "named(Alexander)" [label=ARG1]
	compound -> "named(Alexander)" [label=ARG1]
	_a_q -> _editor_n_1 [label=BV]
	"_get_v_state-fn.IN" -> _into_p [label="ARG2-fn.Patient"]
	_the_q -> _worm_n_1 [label=BV]
	appos -> _publication_n_1 [label=ARG2]
	"_tell_v_1-fn.Telling" -> "_get_v_state-fn.IN" [label="ARG3-fn.NotExist"]
	udef_q -> _computer_n_1 [label=BV]
	_same_a_as -> generic_entity [label=ARG1]
	proper_q -> "named(Michael)" [label=BV]
	_be_v_id -> generic_entity [label=ARG2]
	proper_q -> "named(Computerworld)" [label=BV]
	parg_d -> pron [label=ARG2]
	compound -> _computer_n_1 [label=ARG2]
	"_say_v_to-fn.IN" -> "named(Alexander)" [label="ARG1-fn.NotExist"]
	"_such+as_p" -> _password_n_1 [label=ARG1]
	pronoun_q -> pron [label=BV]
	_obvious_a_to -> _password_n_1 [label=ARG1]
	_look_v_for -> _password_n_1 [label=ARG2]
	comp_equal -> _same_a_as [label=ARG1]
	compound -> _trade_n_of [label=ARG2]
	compound -> _center_n_of [label=ARG1]
	_at_p -> "named(Computerworld)" [label=ARG2]
	"_tell_v_1-fn.Telling" -> pron [label="ARG2-fn.NotExist"]
	_a_q -> _publication_n_1 [label=BV]
	_into_p -> _worm_n_1 [label=ARG1]
	_into_p -> _center_n_of [label=ARG2]
	udef_q -> nominalization [label=BV]
	"card(2+)" -> generic_entity [label=ARG1]
	comp_equal -> _name_n_of [label=ARG2]
	appos -> "named(Computerworld)" [label=ARG1]
	poss -> _name_n_of [label=ARG1]
	poss -> _user_n_of [label=ARG2]
	"_get_v_state-fn.IN" -> _worm_n_1 [label="ARG1-fn.NotExist"]
	nominalization -> _look_v_for [label=ARG1]
	_the_q -> _user_n_of [label=BV]
	_at_p -> _editor_n_1 [label=ARG1]
	compound -> "named(Michael)" [label=ARG2]
	"_say_v_to-fn.IN" -> "_tell_v_1-fn.Telling" [label="ARG2-fn.NotExist"]
	def_explicit_q -> _name_n_of [label=BV]
}
