digraph {
	node [shape=circle style=filled]
	udef_q -> _st_n_1 [label=BV]
	_in_p_state -> _past_n_1 [label=ARG2]
	"_expect_v_1-fn.Attempt" -> "_continue_v_2-fn.State_continue" [label="ARG2-fn.Goal"]
	"_expect_v_1-fn.Attempt" -> pron [label="ARG1-fn.Agent"]
	focus_d -> _in_p_state [label=ARG2]
	udef_q -> _control_n_of [label=BV]
	"_continue_v_2-fn.State_continue" -> "_evaluate_v_1-fn.State_continue" [label="ARG1-fn.Entity"]
	_in_p_state -> "_consider_v_1-fn.Attempt_suasion" [label=ARG1]
	udef_q -> _time_n_of [label=BV]
	_in_p_state -> "_say_v_to-fn.Taking" [label=ARG1]
	_to_p -> "_evaluate_v_1-fn.State_continue" [label=ARG1]
	focus_d -> "_say_v_to-fn.Taking" [label=ARG1]
	proper_q -> "named(Milton)" [label=BV]
	_the_q -> _filing_n_1 [label=BV]
	"_say_v_to-fn.Taking" -> _and_c [label="ARG2-fn.Theme"]
	_from_p_time -> _time_n_of [label=ARG2]
	_from_p_time -> "_evaluate_v_1-fn.State_continue" [label=ARG1]
	proper_q -> "named(Petersburg)" [label=BV]
	udef_q -> _offer_n_1 [label=BV]
	"_consider_v_1-fn.Attempt_suasion" -> pron [label="ARG1-fn.Content"]
	"_consider_v_1-fn.Attempt_suasion" -> "_seek_v_1-fn.State_continue" [label="ARG2-fn.Addressee"]
	compound -> _offer_n_1 [label=ARG1]
	_a_q -> _or_c [label=BV]
	_control_n_of -> "named(Roy)" [label=ARG1]
	pronoun_q -> pron [label=BV]
	_of_p -> "named(Florida)" [label=ARG2]
	"_evaluate_v_1-fn.State_continue" -> pron [label="ARG1-fn.Entity"]
	proper_q -> "named(Crane)" [label=BV]
	_through_p -> "_seek_v_1-fn.State_continue" [label=ARG1]
	udef_q -> _tender_n_1 [label=BV]
	"_evaluate_v_1-fn.State_continue" -> _acquisition_n_of [label="ARG2-fn.State"]
	compound -> _tender_n_1 [label=ARG2]
	proper_q -> "named(Roy)" [label=BV]
	_a_q -> _acquisition_n_of [label=BV]
	compound -> _st_n_1 [label=ARG2]
	compound -> "named(Florida)" [label=ARG1]
	proper_q -> "named(Florida)" [label=BV]
	"_seek_v_1-fn.State_continue" -> _control_n_of [label="ARG2-fn.State"]
	focus_d -> "_consider_v_1-fn.Attempt_suasion" [label=ARG1]
	compound -> "named(Petersburg)" [label=ARG2]
	_in_p_state -> _filing_n_1 [label=ARG2]
	_through_p -> _or_c [label=ARG2]
	compound -> "named(Milton)" [label=ARG2]
	compound -> "named(Roy)" [label=ARG1]
	_of_p -> "named(Roy)" [label=ARG1]
	"_seek_v_1-fn.State_continue" -> pron [label="ARG1-fn.Entity"]
	"_say_v_to-fn.Taking" -> "named(Crane)" [label="ARG1-fn.Agent"]
	_the_q -> _past_n_1 [label=BV]
	udef_q -> _merger_n_1 [label=BV]
	_to_p -> _time_n_of [label=ARG2]
}
