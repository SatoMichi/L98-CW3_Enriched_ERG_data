digraph {
	node [shape=circle style=filled]
	_the_q -> _producer_n_of [label=BV]
	"_tell_v_1-fn.Telling" -> _producer_n_of [label="ARG2-fn.NotExist"]
	neg -> _would_v_modal [label=ARG1]
	poss -> pron [label=ARG2]
	_own_a_1 -> "_affidavit/nn_u_unknown" [label=ARG1]
	proper_q -> "named(Daly)" [label=BV]
	"_say_v_to-fn.IN" -> "_instruct_v_on-fn.NF" [label="ARG2-fn.NotExist"]
	_would_v_modal -> "_terminate_v_cause-fn.Activity_stop" [label=ARG1]
	"_instruct_v_on-fn.NF" -> _and_c [label="ARG1-fn.Agent"]
	proper_q -> "named(Semel)" [label=BV]
	compound -> _mister_n_1 [label=ARG2]
	"_instruct_v_on-fn.NF" -> "_tell_v_1-fn.Telling" [label="ARG3-fn.Topic"]
	"_instruct_v_on-fn.NF" -> "named(Semel)" [label="ARG2-fn.Recipient"]
	udef_q -> _mister_n_1 [label=BV]
	"_tell_v_1-fn.Telling" -> neg [label="ARG3-fn.NotExist"]
	def_explicit_q -> "_affidavit/nn_u_unknown" [label=BV]
	_in_p -> "_affidavit/nn_u_unknown" [label=ARG2]
	"_tell_v_1-fn.Telling" -> "named(Semel)" [label="ARG1-fn.NotExist"]
	poss -> _agreement_n_1 [label=ARG1]
	compound -> "named(Ross)" [label=ARG1]
	pronoun_q -> pron [label=BV]
	"_say_v_to-fn.IN" -> "named(Ross)" [label="ARG1-fn.NotExist"]
	"_terminate_v_cause-fn.Activity_stop" -> "named(Warner)" [label="ARG1-fn.Agent"]
	def_explicit_q -> _agreement_n_1 [label=BV]
	proper_q -> "named(Ross)" [label=BV]
	compound -> "named(Daly)" [label=ARG1]
	proper_q -> "named(Warner)" [label=BV]
	"_terminate_v_cause-fn.Activity_stop" -> _agreement_n_1 [label="ARG2-fn.Theme"]
	compound -> "named(Semel)" [label=ARG1]
	udef_q -> _and_c [label=BV]
	poss -> "_affidavit/nn_u_unknown" [label=ARG1]
	_in_p -> "named(Ross)" [label=ARG1]
}
