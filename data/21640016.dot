digraph {
	node [shape=circle style=filled]
	_a_q -> _computer_n_1 [label=BV]
	"_steal_v_from-fn.Theft" -> _secret_n_1 [label="ARG2-fn.Theme"]
	_now_a_1 -> "_exist_v_1-fn.Existence" [label=ARG1]
	_after_x_h -> _erase_v_1 [label=ARG2]
	_moreover_a_1 -> "_say_v_to-fn.IN" [label=ARG1]
	_for_p -> nominalization [label=ARG2]
	poss -> _computer_n_1 [label=ARG2]
	_erase_v_1 -> pron [label=ARG2]
	_after_x_h -> "_steal_v_from-fn.Theft" [label=ARG1]
	parg_d -> pron [label=ARG2]
	udef_q -> _secret_n_1 [label=BV]
	def_explicit_q -> _memory_n_of [label=BV]
	pronoun_q -> pron [label=BV]
	_for_p -> "_exist_v_1-fn.Existence" [label=ARG1]
	"_exist_v_1-fn.Existence" -> _technology_n_1 [label="ARG1-fn.NotExist"]
	parg_d -> _erase_v_1 [label=ARG1]
	_from_p -> _erase_v_1 [label=ARG1]
	_corporate_a_1 -> _secret_n_1 [label=ARG1]
	udef_q -> nominalization [label=BV]
	_from_p -> _memory_n_of [label=ARG2]
	udef_q -> _technology_n_1 [label=BV]
	"_say_v_to-fn.IN" -> pron [label="ARG1-fn.Agent"]
	nominalization -> _after_x_h [label=ARG1]
	"_say_v_to-fn.IN" -> "_exist_v_1-fn.Existence" [label="ARG2-fn.NotExist"]
	poss -> _memory_n_of [label=ARG1]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
