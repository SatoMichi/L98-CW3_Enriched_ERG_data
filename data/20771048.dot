digraph {
	node [shape=circle style=filled]
	_even_x_deg -> proper_q [label=ARG1]
	_argue_v_with -> _if_x_then [label=ARG2]
	_just_x_deg -> comp_equal [label=ARG1]
	parg_d -> _mire_v_1 [label=ARG1]
	_beyond_p_dir -> _interpretation_n_of [label=ARG2]
	udef_q -> _interpretation_n_of [label=BV]
	"_in+order+to_x" -> _argue_v_with [label=ARG2]
	_plausible_a_1 -> pron [label=ARG1]
	_can_v_modal -> "_get_v_state-fn.IN" [label=ARG1]
	_the_q -> _problem_n_of [label=BV]
	_in_p -> _mire_v_1 [label=ARG1]
	udef_q -> _mess_n_1 [label=BV]
	compound -> "named(Boren)" [label=ARG1]
	_sort_n_of -> _mess_n_1 [label=ARG1]
	_legal_a_1 -> _interpretation_n_of [label=ARG1]
	_if_x_then -> "_go_v_1-fn.Motion" [label=ARG1]
	_argue_v_with -> pron [label=ARG1]
	pronoun_q -> pron [label=BV]
	_in_p -> _sort_n_of [label=ARG2]
	_this_q_dem -> _sort_n_of [label=BV]
	_beyond_p_dir -> "_go_v_1-fn.Motion" [label=ARG1]
	compound -> "named(David)" [label=ARG2]
	"_go_v_1-fn.Motion" -> _problem_n_of [label="ARG1-fn.NotExist"]
	comp_equal -> _plausible_a_1 [label=ARG1]
	proper_q -> "named(Boren)" [label=BV]
	_mire_v_1 -> "named(Boren)" [label=ARG2]
	"_in+order+to_x" -> _plausible_a_1 [label=ARG1]
	_if_x_then -> _can_v_modal [label=ARG2]
	"_get_v_state-fn.IN" -> _mire_v_1 [label="ARG2-fn.Patient"]
	proper_q -> "named(David)" [label=BV]
	"_get_v_state-fn.IN" -> "named(Boren)" [label="ARG1-fn.NotExist"]
	parg_d -> "named(Boren)" [label=ARG2]
}
