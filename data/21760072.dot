digraph {
	node [shape=circle style=filled]
	_if_x_then -> "_want_v_1-fn.Desiring" [label=ARG2]
	compound -> "named(South)" [label=ARG2]
	_rest_n_of -> "named(Africa)" [label=ARG1]
	proper_q -> "named(Africa)" [label=BV]
	poss -> pron [label=ARG2]
	compound -> _pot_n_1 [label=ARG1]
	_that_q_dem -> generic_entity [label=BV]
	_integrate_v_into -> _pot_n_1 [label=ARG2]
	compound -> "named(Africa)" [label=ARG1]
	compound -> nominalization [label=ARG2]
	_be_v_id -> generic_entity [label=ARG1]
	parg_d -> _integrate_v_into [label=ARG1]
	_the_q -> _rest_n_of [label=BV]
	"_want_v_1-fn.Desiring" -> "_have_v_1-fn.IN" [label="ARG2-fn.Theme"]
	pronoun_q -> pron [label=BV]
	parg_d -> _pot_n_1 [label=ARG2]
	"_have_v_1-fn.IN" -> _pot_n_1 [label="ARG2-fn.Theme"]
	"_want_v_1-fn.Desiring" -> _rest_n_of [label="ARG1-fn.Pivot"]
	udef_q -> nominalization [label=BV]
	def_explicit_q -> _choice_n_of [label=BV]
	poss -> _choice_n_of [label=ARG1]
	"_say_v_to-fn.IN" -> pron [label="ARG1-fn.Agent"]
	"_have_v_1-fn.IN" -> _rest_n_of [label="ARG1-fn.Pivot"]
	_if_x_then -> _be_v_id [label=ARG1]
	_look_a_1 -> "_say_v_to-fn.IN" [label=ARG1]
	"_say_v_to-fn.IN" -> _if_x_then [label="ARG2-fn.NotExist"]
	nominalization -> _melt_v_1 [label=ARG1]
	_a_q -> _pot_n_1 [label=BV]
	proper_q -> "named(South)" [label=BV]
	_be_v_id -> _choice_n_of [label=ARG2]
}
