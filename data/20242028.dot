digraph {
	node [shape=circle style=filled]
	parg_d -> _superiority_n_1 [label=ARG2]
	udef_q -> _pact_n_1 [label=BV]
	"_get_v_state-fn.IN" -> _bring_v_1 [label="ARG3-fn.NotExist"]
	udef_q -> _parity_n_1 [label=BV]
	compound -> _bottom_n_1 [label=ARG2]
	_the_q -> _line_n_of [label=BV]
	_down_p -> _superiority_n_1 [label=ARG1]
	_can_v_modal -> "_get_v_state-fn.IN" [label=ARG1]
	_ahead_p -> _press_v_1 [label=ARG1]
	compound -> _superiority_n_1 [label=ARG1]
	_possible_a_for -> ellipsis [label=ARG1]
	comp_equal -> _quick_a_1 [label=ARG1]
	_ought_v_qmodal -> "_keep_v_on-fn.Activity_ongoing" [label=ARG1]
	_be_v_nv -> _line_n_of [label=ARG1]
	parg_d -> _bring_v_1 [label=ARG1]
	compound -> _pact_n_1 [label=ARG1]
	compound -> "named(Warsaw)" [label=ARG2]
	_quick_a_1 -> _press_v_1 [label=ARG1]
	"_get_v_state-fn.IN" -> _superiority_n_1 [label="ARG2-fn.Patient"]
	pronoun_q -> pron [label=BV]
	_if_x_then -> _ought_v_qmodal [label=ARG1]
	compound -> _line_n_of [label=ARG1]
	udef_q -> _bottom_n_1 [label=BV]
	comp_equal -> _possible_a_for [label=ARG2]
	_bring_v_1 -> _superiority_n_1 [label=ARG2]
	_to_p -> _parity_n_1 [label=ARG2]
	"_keep_v_on-fn.Activity_ongoing" -> _press_v_1 [label="ARG1-fn.Agent"]
	_press_v_1 -> pron [label=ARG1]
	_bring_v_1 -> _down_p [label=ARG3]
	_to_p -> _down_p [label=ARG1]
	_be_v_nv -> _if_x_then [label=ARG2]
	_if_x_then -> _can_v_modal [label=ARG2]
	proper_q -> "named(Warsaw)" [label=BV]
	"_get_v_state-fn.IN" -> pron [label="ARG1-fn.Agent"]
	_that_q_dem -> _superiority_n_1 [label=BV]
}
