digraph {
	node [shape=circle style=filled]
	_to_p -> "_get_v_1-fn.IN" [label=ARG1]
	compound -> _manager_n_of [label=ARG1]
	udef_q -> "named(John)" [label=BV]
	appos -> "named(John)" [label=ARG1]
	"_get_v_1-fn.IN" -> _say_n_1 [label="ARG3-fn.NotExist"]
	_be_v_there -> _diamond_n_1 [label=ARG1]
	def_implicit_q -> place_n [label=BV]
	proper_q -> "named(Beers)" [label=BV]
	udef_q -> _diamond_n_1 [label=BV]
	proper_q -> "named(Les)" [label=BV]
	compound -> "named(DE)" [label=ARG2]
	udef_q -> _say_n_1 [label=BV]
	_out_p -> place_n [label=ARG2]
	_out_p -> _diamond_n_1 [label=ARG1]
	compound -> "named(John)" [label=ARG1]
	pronoun_q -> pron [label=BV]
	compound -> _engineering_n_1 [label=ARG2]
	poss -> "named(Beers)" [label=ARG2]
	"_get_v_1-fn.IN" -> pron [label="ARG1-fn.Agent"]
	proper_q -> "named(DE)" [label=BV]
	def_explicit_q -> _manager_n_of [label=BV]
	poss -> _manager_n_of [label=ARG1]
	"_get_v_1-fn.IN" -> "named(John)" [label="ARG2-fn.Patient"]
	compound -> "named(Beers)" [label=ARG1]
	_if_x_then -> "_get_v_1-fn.IN" [label=ARG1]
	_if_x_then -> _be_v_there [label=ARG2]
	compound -> "named(Les)" [label=ARG2]
	_to_p -> pron [label=ARG2]
	_there_a_1 -> place_n [label=ARG1]
	appos -> _manager_n_of [label=ARG2]
	udef_q -> _engineering_n_1 [label=BV]
}
