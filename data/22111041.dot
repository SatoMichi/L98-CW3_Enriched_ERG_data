digraph {
	node [shape=circle style=filled]
	compound -> "named(Barrett)" [label=ARG2]
	_tough_a_for -> "_explain_v_to-fn.Statement" [label=ARG1]
	proper_q -> "named(Ames)" [label=BV]
	"_say_v_to-fn.IN" -> _but_c [label="ARG2-fn.NotExist"]
	"_make_v_1-fn.IN" -> _rake_n_1 [label="ARG1-fn.NotExist"]
	proper_q -> "named(W)" [label=BV]
	compound -> "named(Ames)" [label=ARG1]
	compound -> "named(Virginia)" [label=ARG1]
	"_explain_v_to-fn.Statement" -> pron [label="ARG2-fn.NotExist"]
	proper_q -> "named(Virginia)" [label=BV]
	compound -> _company_n_1 [label=ARG2]
	compound -> "named(Richard)" [label=ARG2]
	proper_q -> "named(Mason)" [label=BV]
	proper_q -> "named(Barrett)" [label=BV]
	proper_q -> "named(Parkersburg)" [label=BV]
	compound -> "named(Parkersburg)" [label=ARG2]
	_in_p -> "named(Ames)" [label=ARG1]
	_president_n_of -> "named(Ames)" [label=ARG1]
	appos -> "named(Mason)" [label=ARG1]
	appos -> _president_n_of [label=ARG2]
	pronoun_q -> pron [label=BV]
	proper_q -> "named(Richard)" [label=BV]
	udef_q -> _president_n_of [label=BV]
	udef_q -> _sense_n_of [label=BV]
	"_explain_v_to-fn.Statement" -> _consumer_n_of [label="ARG3-fn.NotExist"]
	compound -> _rake_n_1 [label=ARG1]
	udef_q -> _consumer_n_of [label=BV]
	"_make_v_1-fn.IN" -> _sense_n_of [label="ARG2-fn.Product"]
	_would_v_modal -> _tough_a_for [label=ARG1]
	_in_p -> "named(Virginia)" [label=ARG2]
	compound -> "named(W)" [label=ARG2]
	_the_q -> _rake_n_1 [label=BV]
	udef_q -> _company_n_1 [label=BV]
	"_say_v_to-fn.IN" -> "named(Mason)" [label="ARG1-fn.NotExist"]
	compound -> "named(Mason)" [label=ARG1]
}
