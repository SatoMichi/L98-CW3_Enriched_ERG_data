digraph {
	node [shape=circle style=filled]
	_skip_v_1 -> pron [label=ARG1]
	"_in+order+to_x" -> "_in+order+to_x" [label=ARG2]
	_skip_v_1 -> _practice_n_of [label=ARG2]
	"_in+order+to_x" -> _or_c [label=ARG1]
	neg -> _allow_v_1 [label=ARG1]
	"_say_v_1-fn.IN" -> pron [label="ARG1-fn.Agent"]
	_first_a_1 -> "_get_v_1-fn.IN" [label=ARG1]
	_a_q -> _degree_n_of [label=BV]
	_a_q -> _test_n_of [label=BV]
	"_in+order+to_x" -> "_get_v_1-fn.IN" [label=ARG2]
	"_study_v_1-fn.Education_teaching" -> pron [label="ARG1-fn.Agent"]
	pronoun_q -> pron [label=BV]
	"_get_v_1-fn.IN" -> _degree_n_of [label="ARG2-fn.Theme"]
	"_in+order+to_x" -> "_study_v_1-fn.Education_teaching" [label=ARG2]
	"_get_v_1-fn.IN" -> pron [label="ARG1-fn.Agent"]
	"_in+order+to_x" -> _skip_v_1 [label=ARG1]
	_always_a_1 -> "_say_v_1-fn.IN" [label=ARG1]
	_for_p -> "_study_v_1-fn.Education_teaching" [label=ARG1]
	udef_q -> _time_n_of [label=BV]
	_allow_v_1 -> _time_n_of [label=ARG2]
	_or_c -> neg [label=ARG1]
	_allow_v_1 -> pron [label=ARG3]
	"_in+order+to_x" -> "_say_v_1-fn.IN" [label=ARG1]
	udef_q -> _practice_n_of [label=BV]
	_for_p -> _test_n_of [label=ARG2]
}
