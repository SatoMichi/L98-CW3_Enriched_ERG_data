digraph {
	node [shape=circle style=filled]
	_to_p -> _student_n_of [label=ARG2]
	parg_d -> "_maintain_v_1-fn.Statement" [label=ARG1]
	udef_q -> _competition_n_1 [label=BV]
	"_say_v_to-fn.IN" -> _if_x_then [label="ARG2-fn.Topic"]
	_could_v_modal -> "_maintain_v_1-fn.Statement" [label=ARG1]
	_to_p -> _return_v_1 [label=ARG1]
	"_reduce_v_1-fn.Cause_change_of_position_on_a_scale" -> _schedule_n_1 [label="ARG2-fn.Patient"]
	_probable_a_1 -> _would_v_modal [label=ARG1]
	_would_v_modal -> "_remain_v_1-fn.State_continue" [label=ARG1]
	"_remain_v_1-fn.State_continue" -> _full_a_of [label="ARG2-fn.Theme"]
	parg_d -> _schedule_n_1 [label=ARG2]
	parg_d -> _competition_n_1 [label=ARG2]
	_if_x_then -> discourse [label=ARG1]
	pronoun_q -> pron [label=BV]
	"_remain_v_1-fn.State_continue" -> _stadium_n_1 [label="ARG1-fn.NotExist"]
	udef_q -> _stadium_n_1 [label=BV]
	focus_d -> discourse [label=ARG2]
	"_maintain_v_1-fn.Statement" -> _competition_n_1 [label="ARG2-fn.Theme"]
	_full_a_of -> _stadium_n_1 [label=ARG1]
	_the_q -> _student_n_of [label=BV]
	_the_q -> _game_n_1 [label=BV]
	udef_q -> _schedule_n_1 [label=BV]
	_if_x_then -> _and_c [label=ARG2]
	"_say_v_to-fn.IN" -> pron [label="ARG1-fn.Agent"]
	parg_d -> "_reduce_v_1-fn.Cause_change_of_position_on_a_scale" [label=ARG1]
	_return_v_1 -> _game_n_1 [label=ARG1]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
