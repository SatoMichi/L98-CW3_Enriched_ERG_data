digraph {
	node [shape=circle style=filled]
	proper_q -> "named(Alamos)" [label=BV]
	_early_a_1 -> _experiment_n_1 [label=ARG1]
	udef_q -> _fusion_n_1 [label=BV]
	_a_q -> _experiment_n_1 [label=BV]
	compound -> "named(Alamos)" [label=ARG1]
	_of_p -> "named(Laboratory)" [label=ARG2]
	compound -> "named(Los)" [label=ARG2]
	loc_nonsp -> "mofy(Apr)" [label=ARG2]
	proper_q -> "named(Los)" [label=BV]
	compound -> "named(Laboratory)" [label=ARG1]
	_of_p -> "named(Gottesfeld)" [label=ARG1]
	_of_p -> "_neutrons/nns_u_unknown" [label=ARG2]
	_from_p -> "_neutrons/nns_u_unknown" [label=ARG1]
	def_implicit_q -> place_n [label=BV]
	"_announce_v_to-fn.Statement" -> _researcher_n_of [label="ARG1-fn.Agent"]
	proper_q -> "named(Gottesfeld)" [label=BV]
	def_implicit_q -> "mofy(Apr)" [label=BV]
	"_detect_v_1-fn.Perception_experience" -> _burst_n_1 [label="ARG2-fn.Stimulus"]
	proper_q -> "named(Shimson)" [label=BV]
	"_say_v_to-fn.IN" -> _but_c [label="ARG2-fn.Topic"]
	_decide_v_1 -> neg [label=ARG2]
	_confirm_v_as -> pron [label=ARG2]
	pronoun_q -> pron [label=BV]
	"_announce_v_to-fn.Statement" -> pron [label="ARG2-fn.Topic"]
	compound -> "named(Shimson)" [label=ARG2]
	compound -> _experiment_n_1 [label=ARG1]
	udef_q -> _researcher_n_of [label=BV]
	loc_nonsp -> _researcher_n_of [label=ARG1]
	compound -> _fusion_n_1 [label=ARG2]
	_cold_a_1 -> _fusion_n_1 [label=ARG1]
	"_detect_v_1-fn.Perception_experience" -> _researcher_n_of [label="ARG1-fn.Experiencer"]
	proper_q -> "named(Laboratory)" [label=BV]
	_a_q -> _burst_n_1 [label=BV]
	_decide_v_1 -> _researcher_n_of [label=ARG1]
	_last_a_1 -> "mofy(Apr)" [label=ARG1]
	compound -> "named(Gottesfeld)" [label=ARG1]
	_of_p -> _burst_n_1 [label=ARG1]
	loc_nonsp -> place_n [label=ARG2]
	udef_q -> "_neutrons/nns_u_unknown" [label=BV]
	proper_q -> "named(National)" [label=BV]
	"_say_v_to-fn.IN" -> "named(Gottesfeld)" [label="ARG1-fn.Agent"]
	compound -> "named(National)" [label=ARG1]
	loc_nonsp -> "_detect_v_1-fn.Perception_experience" [label=ARG1]
	_can_v_modal -> _confirm_v_as [label=ARG1]
	neg -> "_announce_v_to-fn.Statement" [label=ARG1]
	_from_p -> _experiment_n_1 [label=ARG2]
	_there_a_1 -> place_n [label=ARG1]
	_until_x_h -> _can_v_modal [label=ARG2]
	_until_x_h -> _decide_v_1 [label=ARG1]
}
