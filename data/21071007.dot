digraph {
	node [shape=circle style=filled]
	def_explicit_q -> _line_n_of [label=BV]
	proper_q -> "named(Ryder)" [label=BV]
	"_say_v_to-fn.Have_as_requirement" -> _analyst_n_1 [label="ARG1-fn.Dependent"]
	"much-many_a" -> _analyst_n_1 [label=ARG1]
	udef_q -> _analyst_n_1 [label=BV]
	udef_q -> _problem_n_of [label=BV]
	udef_q -> part_of [label=BV]
	_surprised_a_at -> pron [label=ARG1]
	part_of -> _line_n_of [label=ARG1]
	udef_q -> _business_n_1 [label=BV]
	_in_p -> part_of [label=ARG2]
	poss -> "named(Ryder)" [label=ARG2]
	pronoun_q -> pron [label=BV]
	"_continue_v_2-fn.State_continue" -> "_plague_v_1-fn.Halt" [label="ARG1-fn.Entity"]
	_in_p -> _problem_n_of [label=ARG1]
	_line_n_of -> _business_n_1 [label=ARG1]
	"much-many_a" -> part_of [label=ARG1]
	poss -> _line_n_of [label=ARG1]
	"_say_v_to-fn.Have_as_requirement" -> neg [label="ARG2-fn.Requirement"]
	_surprised_a_at -> "_continue_v_2-fn.State_continue" [label=ARG2]
	_the_q -> _company_n_of [label=BV]
	"_plague_v_1-fn.Halt" -> _problem_n_of [label="ARG1-fn.Purpose"]
	"_plague_v_1-fn.Halt" -> _company_n_of [label="ARG2-fn.Place"]
	neg -> _surprised_a_at [label=ARG1]
}
