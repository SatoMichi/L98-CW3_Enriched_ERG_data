digraph {
	node [shape=circle style=filled]
	_if_x_then -> "_accept_v_1-fn.Competition" [label=ARG2]
	"_take_v_1-fn.Competition" -> _control_n_of [label="ARG2-fn.Participant_2"]
	"_try_v_1-fn.Competition" -> "_take_v_1-fn.Competition" [label="ARG2-fn.Participant_2"]
	udef_q -> _control_n_of [label=BV]
	compound -> _minority_n_1 [label=ARG2]
	udef_q -> _minority_n_1 [label=BV]
	"_try_v_1-fn.Competition" -> pron [label="ARG1-fn.Participant_1"]
	"_accept_v_1-fn.Competition" -> _pilot_n_of [label="ARG1-fn.Participant_1"]
	_even_x_deg -> _if_x_then [label=ARG1]
	"_note_v_to-fn.Surpassing" -> _if_x_then [label="ARG2-fn.Profiled_item"]
	"_could_v_modal-fn.Cause_to_end" -> _and_c [label="ARG1-fn.Process"]
	_also_a_1 -> "_note_v_to-fn.Surpassing" [label=ARG1]
	_now_a_1 -> time_n [label=ARG1]
	"_accept_v_1-fn.Competition" -> _stake_n_1 [label="ARG2-fn.Participant_2"]
	_if_x_then -> "_could_v_modal-fn.Cause_to_end" [label=ARG1]
	_a_q -> _time_n_of [label=BV]
	pronoun_q -> pron [label=BV]
	_late_a_for -> _time_n_of [label=ARG1]
	_at_p_temp -> "_come_v_back-fn.Needing" [label=ARG1]
	comp -> _late_a_for [label=ARG1]
	"_note_v_to-fn.Surpassing" -> pron [label="ARG1-fn.Standard_item"]
	_at_p_temp -> _time_n_of [label=ARG2]
	compound -> _stake_n_1 [label=ARG1]
	_still_a_1 -> "_could_v_modal-fn.Cause_to_end" [label=ARG1]
	"_come_v_back-fn.Needing" -> pron [label="ARG1-fn.Cognizer"]
	"_take_v_1-fn.Competition" -> pron [label="ARG1-fn.Participant_1"]
	_the_q -> _pilot_n_of [label=BV]
	loc_nonsp -> time_n [label=ARG2]
	loc_nonsp -> "_accept_v_1-fn.Competition" [label=ARG1]
	def_implicit_q -> time_n [label=BV]
	_a_q -> _stake_n_1 [label=BV]
}
