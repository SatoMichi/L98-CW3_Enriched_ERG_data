digraph {
	node [shape=circle style=filled]
	"_say_v_to-fn.Have_as_requirement" -> "named(John)" [label="ARG1-fn.Dependent"]
	udef_q -> _design_n_of [label=BV]
	compound -> _car_n_1 [label=ARG1]
	_able_a_1 -> pron [label=ARG1]
	_for_p -> _car_n_1 [label=ARG2]
	focus_d -> _but_c [label=ARG2]
	focus_d -> "_say_v_to-fn.Have_as_requirement" [label=ARG1]
	udef_q -> _sir_n_1 [label=BV]
	compound -> "named(John)" [label=ARG1]
	pronoun_q -> pron [label=BV]
	udef_q -> _executive_n_1 [label=BV]
	"_say_v_to-fn.Have_as_requirement" -> _but_c [label="ARG2-fn.Requirement"]
	compound -> _sir_n_1 [label=ARG2]
	"_develop_v_cause-fn.Cause_to_end" -> pron [label="ARG2-fn.Means"]
	"_have_v_1-fn.State_continue" -> _design_n_of [label="ARG2-fn.State"]
	"_have_v_1-fn.State_continue" -> pron [label="ARG1-fn.Entity"]
	_never_a_1 -> _able_a_1 [label=ARG1]
	_able_a_1 -> "_develop_v_cause-fn.Cause_to_end" [label=ARG2]
	_such_q -> _car_n_1 [label=BV]
	compound -> _executive_n_1 [label=ARG2]
	_for_p -> _design_n_of [label=ARG1]
	proper_q -> "named(John)" [label=BV]
}
