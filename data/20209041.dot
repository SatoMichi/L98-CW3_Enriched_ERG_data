digraph {
	node [shape=circle style=filled]
	proper_q -> "named(Genetic)" [label=BV]
	"_say_v_to-fn.IN" -> "_in+order+to_x" [label="ARG2-fn.NotExist"]
	"_try_v_1-fn.Attempt" -> _breed_v_1 [label="ARG2-fn.Theme"]
	"_in+order+to_x" -> "_in+order+to_x" [label=ARG2]
	"_in+order+to_x" -> "_acquire_v_1-fn.Getting" [label=ARG1]
	_nevertheless_a_1 -> "_say_v_to-fn.IN" [label=ARG1]
	udef_q -> _cotton_n_1 [label=BV]
	_breed_v_1 -> _cotton_n_1 [label=ARG2]
	"_negotiate_v_with-fn.NF" -> pron [label="ARG1-fn.Agent"]
	"_in+order+to_x" -> "_negotiate_v_with-fn.NF" [label=ARG1]
	_the_q -> _technology_n_1 [label=BV]
	_breed_v_1 -> pron [label=ARG1]
	compound -> _hybrid_n_1 [label=ARG2]
	"_acquire_v_1-fn.Getting" -> pron [label="ARG1-fn.Agent"]
	pronoun_q -> pron [label=BV]
	"_acquire_v_1-fn.Getting" -> _technology_n_1 [label="ARG2-fn.Theme"]
	compound -> _cotton_n_1 [label=ARG1]
	compound -> "named(Plant)" [label=ARG2]
	proper_q -> "named(Plant)" [label=BV]
	"_say_v_to-fn.IN" -> pron [label="ARG1-fn.Agent"]
	"_try_v_1-fn.Attempt" -> pron [label="ARG1-fn.Agent"]
	udef_q -> _hybrid_n_1 [label=BV]
	"_negotiate_v_with-fn.NF" -> "named(Genetic)" [label="ARG2-fn.Co-Agent"]
	"_in+order+to_x" -> "_try_v_1-fn.Attempt" [label=ARG2]
	compound -> "named(Genetic)" [label=ARG1]
}
