digraph {
	node [shape=circle style=filled]
	_reinforce_v_1 -> _response_n_to [label=ARG1]
	_the_q -> "named(Parliament)" [label=BV]
	_the_q -> _and_c [label=BV]
	_yesterday_a_1 -> time_n [label=ARG1]
	compound -> "named(Parliament)" [label=ARG1]
	_in_p -> "named(Parliament)" [label=ARG1]
	_the_q -> "named(Community)" [label=BV]
	focus_d -> _response_n_to [label=ARG2]
	_the_q -> "named(East)" [label=BV]
	proper_q -> "named(Strasbourg)" [label=BV]
	_accelerate_v_cause -> _response_n_to [label=ARG1]
	compound -> _mister_n_1 [label=ARG2]
	_accelerate_v_cause -> _and_c [label=ARG2]
	udef_q -> _mister_n_1 [label=BV]
	udef_q -> _union_n_of [label=BV]
	_the_q -> _challenge_n_1 [label=BV]
	_response_n_to -> _challenge_n_1 [label=ARG1]
	"_tell_v_1-fn.Telling" -> "named(Parliament)" [label="ARG2-fn.NotExist"]
	_in_p -> "named(Strasbourg)" [label=ARG2]
	compound -> "named(Community)" [label=ARG1]
	parg_d -> _challenge_n_1 [label=ARG2]
	loc_nonsp -> time_n [label=ARG2]
	focus_d -> "_tell_v_1-fn.Telling" [label=ARG1]
	pronoun_q -> pron [label=BV]
	"_present_v_to-fn.NF" -> pron [label="ARG3-fn.Recipient"]
	"_tell_v_1-fn.Telling" -> eventuality [label="ARG3-fn.Recipient"]
	_reinforce_v_1 -> _and_c [label=ARG2]
	_the_q -> _response_n_to [label=BV]
	"_tell_v_1-fn.Telling" -> "named(Mitterrand)" [label="ARG1-fn.Agent"]
	_of_p -> _and_c [label=ARG1]
	_only_a_1 -> _response_n_to [label=ARG1]
	_of_p -> "named(Community)" [label=ARG2]
	compound -> "named(Mitterrand)" [label=ARG1]
	parg_d -> "_present_v_to-fn.NF" [label=ARG1]
	proper_q -> "named(Mitterrand)" [label=BV]
	compound -> "named(European)" [label=ARG2]
	"_present_v_to-fn.NF" -> "named(East)" [label="ARG1-fn.Agent"]
	loc_nonsp -> "_tell_v_1-fn.Telling" [label=ARG1]
	eventuality -> _and_c [label=ARG1]
	proper_q -> "named(European)" [label=BV]
	udef_q -> "_cohesion/nn_u_unknown" [label=BV]
	def_implicit_q -> time_n [label=BV]
	"_present_v_to-fn.NF" -> _challenge_n_1 [label="ARG2-fn.Theme"]
}
