digraph {
	node [shape=circle style=filled]
	proper_q -> "named(Glazer)" [label=BV]
	"_say_v_to-fn.IN" -> neg [label="ARG2-fn.Topic"]
	proper_q -> "named(Harley)" [label=BV]
	_other_a_1 -> "_party_n_of-to" [label=ARG1]
	compound -> "named(Glazer)" [label=ARG2]
	compound -> _group_n_of [label=ARG1]
	_the_q -> _group_n_of [label=BV]
	neg -> "_intend_v_for-fn.Purpose" [label=ARG1]
	"_acquire_v_1-fn.Getting" -> pron [label="ARG2-fn.Theme"]
	"_say_v_to-fn.IN" -> "named(Harley)" [label="ARG1-fn.Agent"]
	parg_d -> "_acquire_v_1-fn.Getting" [label=ARG1]
	udef_q -> _or_c [label=BV]
	_any_q -> "_party_n_of-to" [label=BV]
	"_intend_v_for-fn.Purpose" -> pron [label="ARG1-fn.NotExist"]
	"_acquire_v_1-fn.Getting" -> _or_c [label="ARG1-fn.Agent"]
	parg_d -> pron [label=ARG2]
	"_intend_v_for-fn.Purpose" -> "_acquire_v_1-fn.Getting" [label="ARG2-fn.NotExist"]
	pronoun_q -> pron [label=BV]
}
