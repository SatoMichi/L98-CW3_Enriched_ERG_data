digraph {
	node [shape=circle style=filled]
	_the_q -> _pardon_n_1 [label=BV]
	poss -> _equilibrium_n_1 [label=ARG1]
	compound -> _program_n_of [label=ARG2]
	compound -> _report_n_of [label=ARG1]
	_in_p -> _report_n_of [label=ARG2]
	"_recite_v_1-fn.NF" -> _pardon_n_1 [label="ARG2-fn.Theme"]
	_actual_a_1 -> "_in+order+to_x" [label=ARG1]
	"_in+order+to_x" -> "_need_v_1-fn.Needing" [label=ARG1]
	"_restore_v_to-fn.NF" -> _equilibrium_n_1 [label="ARG2-fn.Theme"]
	_for_p -> nominalization [label=ARG2]
	parg_d -> _pardon_n_1 [label=ARG2]
	udef_q -> _program_n_of [label=BV]
	"_need_v_1-fn.Needing" -> "_arbitrage/nn_u_unknown" [label="ARG2-fn.Theme"]
	parg_d -> _contain_v_1 [label=ARG1]
	nominalization -> _trade_v_1 [label=ARG1]
	udef_q -> _index_n_1 [label=BV]
	_besides_p -> "_say_v_to-fn.IN" [label=ARG1]
	compound -> "named(Brady)" [label=ARG2]
	"_in+order+to_x" -> "_restore_v_to-fn.NF" [label=ARG2]
	proper_q -> "named(Brady)" [label=BV]
	nominalization -> "_recite_v_1-fn.NF" [label=ARG1]
	"_restore_v_to-fn.NF" -> "_arbitrage/nn_u_unknown" [label="ARG1-fn.Agent"]
	compound -> _stock_n_1 [label=ARG2]
	compound -> _index_n_1 [label=ARG1]
	pronoun_q -> pron [label=BV]
	parg_d -> "_need_v_1-fn.Needing" [label=ARG1]
	udef_q -> _stock_n_1 [label=BV]
	loc_nonsp -> "_need_v_1-fn.Needing" [label=ARG1]
	poss -> _market_n_1 [label=ARG2]
	_contain_v_1 -> _pardon_n_1 [label=ARG2]
	def_explicit_q -> _equilibrium_n_1 [label=BV]
	udef_q -> "_arbitrage/nn_u_unknown" [label=BV]
	_for_p -> _pardon_n_1 [label=ARG1]
	_the_q -> _report_n_of [label=BV]
	compound -> "_arbitrage/nn_u_unknown" [label=ARG1]
	proper_q -> "dofw(Mon)" [label=BV]
	parg_d -> "_arbitrage/nn_u_unknown" [label=ARG2]
	udef_q -> nominalization [label=BV]
	compound -> _commission_n_of [label=ARG1]
	udef_q -> _commission_n_of [label=BV]
	_besides_p -> nominalization [label=ARG2]
	"_say_v_to-fn.IN" -> pron [label="ARG1-fn.Agent"]
	loc_nonsp -> "dofw(Mon)" [label=ARG2]
	focus_d -> _besides_p [label=ARG2]
	"_say_v_to-fn.IN" -> _actual_a_1 [label="ARG2-fn.Topic"]
	_the_q -> _market_n_1 [label=BV]
	_in_p -> _contain_v_1 [label=ARG1]
	compound -> nominalization [label=ARG1]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
