digraph {
	node [shape=circle style=filled]
	_ride_v_out -> _group_n_of [label=ARG1]
	compound -> "named(Harty)" [label=ARG1]
	compound -> "named(New)" [label=ARG2]
	compound -> "named(Burger)" [label=ARG2]
	proper_q -> "named(Burger)" [label=BV]
	_the_q -> _storm_n_1 [label=BV]
	compound -> _franchise_n_1 [label=ARG2]
	comp -> _long_a_1 [label=ARG1]
	proper_q -> "named(New)" [label=BV]
	compound -> _mister_n_1 [label=ARG2]
	udef_q -> _mister_n_1 [label=BV]
	"_say_v_to-fn.IN" -> "named(Harty)" [label="ARG1-fn.Agent"]
	appos -> "named(Harty)" [label=ARG1]
	_ride_v_out -> _storm_n_1 [label=ARG2]
	_the_q -> _operator_n_of [label=BV]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
	loc_nonsp -> time_n [label=ARG2]
	proper_q -> "named(Harty)" [label=BV]
	_can_v_modal -> _ride_v_out [label=ARG1]
	compound -> "named(King)" [label=ARG1]
	_long_a_1 -> time_n [label=ARG1]
	proper_q -> "named(King)" [label=BV]
	udef_q -> _franchise_n_1 [label=BV]
	compound -> "named(York)" [label=ARG1]
	compound -> _operator_n_of [label=ARG1]
	appos -> _operator_n_of [label=ARG2]
	_in_p -> "named(York)" [label=ARG2]
	loc_nonsp -> _ride_v_out [label=ARG1]
	"_a+lot_x" -> _long_a_1 [label=ARG1]
	_in_p -> _operator_n_of [label=ARG1]
	proper_q -> "named(York)" [label=BV]
	_big_a_1 -> _group_n_of [label=ARG1]
	udef_q -> _group_n_of [label=BV]
	compound -> _group_n_of [label=ARG1]
	focus_d -> _can_v_modal [label=ARG2]
	"_say_v_to-fn.IN" -> _can_v_modal [label="ARG2-fn.Topic"]
	def_implicit_q -> time_n [label=BV]
}
