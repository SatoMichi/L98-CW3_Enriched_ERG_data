digraph {
	node [shape=circle style=filled]
	"_tell_v_1-fn.Telling" -> "_dory/jj_u_unknown" [label="ARG3-fn.Recipient"]
	"_get_v_state-fn.IN" -> pron [label="ARG1-fn.NotExist"]
	"_get_v_state-fn.IN" -> _out_p [label="ARG2-fn.Patient"]
	_for_p -> time_n [label=ARG2]
	_for_p -> "_say_v_to-fn.IN" [label=ARG1]
	def_implicit_q -> time_n [label=BV]
	"_tell_v_1-fn.Telling" -> pron [label="ARG1-fn.Agent"]
	udef_q -> "_hunky-/nn_u_unknown" [label=BV]
	every_q -> thing [label=BV]
	compound -> _mister_n_1 [label=ARG2]
	"_say_v_to-fn.IN" -> _colon_p_namely [label="ARG2-fn.Topic"]
	"_tell_v_1-fn.Telling" -> person [label="ARG2-fn.Topic"]
	udef_q -> _mister_n_1 [label=BV]
	every_q -> person [label=BV]
	_refuse_v_1 -> pron [label=ARG1]
	def_implicit_q -> place_n [label=BV]
	focus_d -> _for_p [label=ARG2]
	_out_p -> place_n [label=ARG2]
	pronoun_q -> pron [label=BV]
	_colon_p_namely -> _refuse_v_1 [label=ARG1]
	_refuse_v_1 -> _and_c [label=ARG2]
	compound -> "_hunky-/nn_u_unknown" [label=ARG2]
	_now_a_1 -> time_n [label=ARG1]
	compound -> "named(Phelan)" [label=ARG1]
	"_dory/jj_u_unknown" -> thing [label=ARG1]
	proper_q -> "named(Phelan)" [label=BV]
	_out_p -> pron [label=ARG1]
	compound -> "_dory/jj_u_unknown" [label=ARG1]
	"_say_v_to-fn.IN" -> "named(Phelan)" [label="ARG1-fn.Agent"]
	_there_a_1 -> place_n [label=ARG1]
	focus_d -> "_say_v_to-fn.IN" [label=ARG1]
}
