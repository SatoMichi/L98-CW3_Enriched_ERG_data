digraph {
	node [shape=circle style=filled]
	focus_d -> "_become_v_id-fn.Assemble" [label=ARG1]
	_through_p -> _clue_n_1 [label=ARG2]
	_various_a_1 -> _clue_n_1 [label=ARG1]
	compound -> _mister_n_1 [label=ARG2]
	_in_p -> _hacker_n_1 [label=ARG1]
	neg -> _or_c [label=ARG1]
	_to_p -> _evident_a_to [label=ARG1]
	compound -> "named(Stoll)" [label=ARG1]
	udef_q -> nominalization [label=BV]
	udef_q -> _clue_n_1 [label=BV]
	udef_q -> _mister_n_1 [label=BV]
	_the_q -> _hacker_n_1 [label=BV]
	_after_p -> nominalization [label=ARG2]
	_on_p -> _hacker_n_1 [label=ARG1]
	_the_q -> _campus_n_1 [label=BV]
	compound -> _campus_n_1 [label=ARG1]
	focus_d -> _after_p [label=ARG2]
	_after_p -> "_become_v_id-fn.Assemble" [label=ARG1]
	_through_p -> _to_p [label=ARG1]
	_on_p -> _campus_n_1 [label=ARG2]
	proper_q -> "named(Berkeley)" [label=BV]
	proper_q -> "named(California)" [label=BV]
	"much-many_a" -> nominalization [label=ARG1]
	"_become_v_id-fn.Assemble" -> _evident_a_to [label="ARG2-fn.Group"]
	_in_p -> "named(California)" [label=ARG2]
	_evident_a_to -> neg [label=ARG1]
	nominalization -> _track_v_1 [label=ARG1]
	_even_x_deg -> _in_p [label=ARG1]
	compound -> "named(Berkeley)" [label=ARG2]
	_to_p -> "named(Stoll)" [label=ARG2]
	proper_q -> "named(Stoll)" [label=BV]
}
